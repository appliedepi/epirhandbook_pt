[{"path":"index.html","id":"section","chapter":"","heading":"","text":"Este manual se esforça para:Servir como um manual rápido de referência código RFornecer exemplos centrados em tarefas que abordam problemas epidemiológicos comunsAuxiliar os epidemiologistas na transição para o RSer acessível em ambientes com baixa conectividade com Internet através de um versão offline \nEscrito por epidemiologistas, para epidemiologistasSomos epidemiologistas aplicados de todo o mundo, escrevendo em nosso tempo livre para oferecer este recurso à comunidade. Seu encorajamento e feedback são muito bem-vindos:Formulário estruturado de feedbackEmail epiRhandbook@gmail.com ou tweet @epiRhandbookSubmeta issues nosso repositório Github","code":""},{"path":"index.html","id":"como-usar-este-manual","chapter":"","heading":"Como usar este manual","text":"Navegue pelas páginas Índice, ou use caixa de buscaClique nos ícones “copiar” para copiar o códigoVocê pode seguir - junto com [os dados exemplo][Fazer o Download manual e dos dados].Consulte seção “Recursos” de cada página para obter mais materialVersão -line*Veja instruções na página [Fazer o Download manual e dos dados]].LínguasEsta é uma versão traduzida para Português. Se você quer colaborar em melhorá-la, corrigindo algum erro, ou traduzir para outra língua, por favor, nos contacte!","code":""},{"path":"index.html","id":"agradecimentos","chapter":"","heading":"0.1 Agradecimentos","text":"Este manual é produzido por uma colaboração de epidemiologistas de todo o mundo, aproveitando experiência de organizações que incluem agências de saúde locais, estaduais, provinciais e nacionais, Organização Mundial da Saúde (OMS), Médicos Sem Fronteiras / Médicos sem Fronteiras (MSF), sistemas hospitalares e instituições acadêmicas.Este manual é não* um produto aprovado de qualquer organização específica. Embora nos esforcemos para ser precisos, não damos nenhuma garantia conteúdo deste livro.","code":""},{"path":"index.html","id":"colaboradores","chapter":"","heading":"Colaboradores","text":"Editor: Neale BatraEquipe principal projeto: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay Campbell, Paula Blomquist, Aminata Ndiaye, Isaac Florence, Isha Berry, Mathilde Mousset, Sara Hollis, Liza Coyer, Kate Kelsey, Marie-Amélie Degail Chabrat, Joao MuiangaAutores: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Chris Bailey, Daniel Molling, Isha Berry, Emma Buajitti, Mathilde Mousset, Sara Hollis, Wen LinRevisores: Pat Keating, Annick Lenglet, Margot Charette, Danielly Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Kate Kelsey, Berhe Etsay, John Rossow, Mackenzie Zendt, James Wright, Laura Haskins, Flavio Finger, Tim Taylor, Jae Hyoung Tim Lee, Brianna Bradley, Wayne Enanoria, Manual Albela Miranda, Molly Mantus, Pattama Ulrich, Joseph Timothy, Adam Vaughan, Olivia Varsaneux, Lionel Monteiro, Joao MuiangaIlustradores: Calder FongTradutores da versão em língua portuguesa (Brasil): Carolina Musso, César Augusto Galvão , Halian Vilela, Laís Relvas ,Felipe Cardoso tradução, Rafaela Tadei, Pauliana Galvão, Nathalia Zini, Paula Maiçara, João Pedro Angelici, Ademar Barbosa Dantas Junior, Eucilene Santana, Hudson Gabriel Virtuoso Fontenele","code":""},{"path":"index.html","id":"financiamento-e-apoio","chapter":"","heading":"Financiamento e apoio","text":"O manual recebeu financiamento de apoio através de uma subvenção de emergência COVID-19 da TEPHINET, rede global de Programas de Treinamento em Epidemiologia de Campo (FETPs).O apoio administrativo foi fornecido pela EPIET Alumni Network (EAN), com agradecimentos especiais à Annika Wendland. O EPIET é o Programa Europeu de Treinamento em Epidemiologia de Intervenção.Agradecimentos especiais aos Médicos Sem Fronteiras (MSF) Centro Operacional Amsterdã (OCA) por seu apoio durante o desenvolvimento deste manual.Esta publicação foi apoiada pelo Acordo Cooperativo número NU2GGH001873, financiado pelos Centros de Controle e Prevenção de Doenças através TEPHINET, um programa da Força Tarefa para Saúde Global. Seu conteúdo é de responsabilidade exclusiva dos autores e não representa necessariamente visão oficial dos Centros de Controle e Prevenção de Doenças, Departamento de Saúde e Serviços Humanos, Task Force Global Health, Inc. ou TEPHINET.","code":""},{"path":"index.html","id":"inspiração","chapter":"","heading":"Inspiração","text":"infinidade de tutoriais e vinhetas que forneceram conhecimento para o desenvolvimento conteúdo manual são creditados dentro de suas respectivas páginas.De modo mais geral, seguintes fontes forneceram inspiração para este manual:“R4Epis” project (colaboração entre MSF e RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"termos-de-uso-e-contribuição","chapter":"","heading":"Termos de Uso e Contribuição","text":"","code":""},{"path":"index.html","id":"licença","chapter":"","heading":"Licença","text":"Esta obra está licenciada sob uma Licença Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.Cursos acadêmicos e programas de treinamento de epidemiologistas são bem-vindos para usar este manual com seus alunos. Se você tiver dúvidas sobre o uso pretendido, envie um e-mail para epiRhandbook@gmail.com.","code":""},{"path":"index.html","id":"citação","chapter":"","heading":"Citação","text":"Batra, Neale, et ai. O Manual Epidemiologista R. 2021. ","code":""},{"path":"index.html","id":"contribuição","chapter":"","heading":"Contribuição","text":"Se você quiser fazer uma contribuição de conteúdo, entre em contato conosco primeiro por meio de questões Github ou por e-mail. Estamos implementando um cronograma de atualizações e criando um guia contribuidor.Observe que o projeto epiRhandbook é lançado com um Código de Conduta Contribuidor. Ao contribuir para este projeto, você concorda em respeitar seus termos.","code":""},{"path":"o-básico-do-ggplot.html","id":"o-básico-do-ggplot","chapter":"1 O básico do ggplot","heading":"1 O básico do ggplot","text":"O ggplot2 é o pacote R mais popular de visualização de dados. Sua função ggplot() está centro deste pacote, e toda esta abordagem é conhecida coloquialmente como “ggplot” com imagens resultantes às vezes carinhosamente chamadas de “ggplots”. O “gg” nestes nomes reflete “gramática de gráficos” utilizados para construir figuras. O ggplot2 beneficia-se de uma grande variedade de pacotes R suplementares que melhoram ainda mais sua funcionalidade.sintaxe é significativamente diferente dos gráficos gerados pelo R base*, e tem uma curva de aprendizado associada ela. utilização ggplot2 geralmente exige que o usuário formate seus dados de uma forma altamente compatível com o “tidyverse”, o que em última análise torna utilização conjunta destes pacotes muito eficaz.Nesta página cobriremos os fundamentos da criação de gráficos com o pacote ggplot2. Veja página [Dicas para o ggplot] para sugestões e técnicas avançadas para tornar seus gráficos realmente bonitos.Há vários tutoriais completos de ggplot2 disponíveis na seção de recursos. Você também pode baixar esta cheat sheet (colinha) de visualização de dados site RStudio. Se você quiser inspiração para formas de visualizar criativamente seus dados, sugerimos que você revise sites como o galeria de gráficos R e Data--viz.","code":""},{"path":"o-básico-do-ggplot.html","id":"preparação","chapter":"1 O básico do ggplot","heading":"1.1 Preparação","text":"","code":""},{"path":"o-básico-do-ggplot.html","id":"carregar-pacotes","chapter":"1 O básico do ggplot","heading":"Carregar pacotes","text":"Este trecho de código mostra o carregamento dos pacotes necessários para análises. Neste manual, enfatizamos p_load() de pacman, que instala o pacote se necessário e o carrega para utilização. Você também pode carregar os pacotes instalados com library() R base*. Veja página em [R - o básico] para mais informações sobre os pacotes R.","code":"\npacman::p_load(\n  tidyverse,      # inclui ggplot2 e outras ferramentas de manipular dados\n  rio,            # importar/exportar\n  here,           # localizador de arquivos\n  stringr,        # trabalhando com caracteres\n  ggforce,        # pacote auxiliar o ggplot2, fornece algumas funções de ajuste de pontos\n  janitor         # pacote para limpeza de dados\n)"},{"path":"o-básico-do-ggplot.html","id":"importar-datos","chapter":"1 O básico do ggplot","heading":"Importar datos","text":"Importamos o conjunto de dados de casos de uma epidemia simulada de Ebola. Se você quiser acompanhar,  clique para baixar linelist “limpa”  (como arquivo .rds). Importe seus dados com função import() pacote rio (ele aceita muitos tipos de arquivos como .xlsx, .rds, .csv - veja página [Importar exportar] para detalhes).primeiras 50 linhas da linelist são exibidas abaixo. Vamos nos concentrar nas variáveis contínuas age, wt_kg (peso em quilos), ct_blood (valores de CT) e days_onset_hosp (diferença entre data de início e hospitalização).","code":"\nlinelist <- rio::import(\"linelist_cleaned.rds\")"},{"path":"o-básico-do-ggplot.html","id":"limpeza-geral","chapter":"1 O básico do ggplot","heading":"Limpeza geral","text":"Ao preparar os dados para traçar o gráfico, é melhor fazer com que os dados adiram aos padrões de dados [“arrumados”] (https://r4ds..co.nz/tidy-data.html) (inglês tidy) na medida possível. Como conseguir isto é explicado com mais detalhes nas páginas de gerenciamento de dados deste manual, tais como [Dados de limpeza e principais funções].Algumas maneiras simples de prepararmos nossos dados para torná-los melhores para visualização podem incluir tornar o conteúdo dos dados melhor para exibição - o que não necessariamente equivale melhor para manipulação de dados. Por exemplo:Substituir os valores NA em uma coluna tipo caracteres pela string “Desconhecido”.Substituir os valores NA em uma coluna tipo caracteres pela string “Desconhecido”.Considerar converter coluna para classe fator para que seus valores tenham níveis em uma ordem específica.Considerar converter coluna para classe fator para que seus valores tenham níveis em uma ordem específica.Limpar algumas colunas para que os valores adequados à manipulações (“data friendly”), tais como valores que possuam sublinhado (“underline”), por exemplo, sejam alterados para texto normal ou padrão título (ver [Caracteres e strings])Limpar algumas colunas para que os valores adequados à manipulações (“data friendly”), tais como valores que possuam sublinhado (“underline”), por exemplo, sejam alterados para texto normal ou padrão título (ver [Caracteres e strings])Aqui estão alguns exemplos disso em ação.","code":"\n#faça uma versão visualizaçãi das colunas com nomes mais amigáveis \n\nlinelist <- linelist %>%\n  mutate(\n    gender_disp = case_when(gender == \"m\" ~ \"Male\",        # m para Male\n                            gender == \"f\" ~ \"Female\",      # f para Femimino,\n                            is.na(gender) ~ \"Desconhecido\"),    # NA para Desconhecido\n    \n    outcome_disp = replace_na(outcome, \"Desconhecido\")          # substituir na por \"Desconhecido\" \n  )"},{"path":"o-básico-do-ggplot.html","id":"pivoteamento-para-mais-longo","chapter":"1 O básico do ggplot","heading":"Pivoteamento para “mais longo”","text":"Por uma questão de estrutura de dados, para ggplot2 muitas vezes também queremos pivotar nossos dados para formatos mais longos. Leia mais sobre isto na página em [Pivotando dados].Por exemplo, digamos que queremos fazer um gráfico de dados que estão em um formato “largo”, como para cada caso na linelist e seus sintomas. Abaixo criamos uma mini-linelist chamada symptoms_data que contém apenas colunas case_id e sintomas.Veja como são primeiras 50 linhas desta mini-linelist - veja como elas são formatadas de forma “larga” com cada sintoma como uma coluna:Se quisermos traçar um gráfico com o número de casos com sintomas específicos, estamos limitados pelo fato de que cada sintoma é uma coluna específica. Entretanto, podemos pivotar colunas de sintomas para um formato mais longo como este:Aqui estão primeiras 50 linhas. Observe que o caso tem 5 fileiras - uma para cada sintoma possível. novas colunas nome_sintoma e sintoma_esta_presente são o resultado pivoteamento. Note que este formato pode não ser muito útil para outras operações, mas é útil para criação gráfico.","code":"\nsymptoms_data <- linelist %>% \n  select(c(case_id, fever, chills, cough, aches, vomit))\nsymptoms_data_long <- symptoms_data %>%    # comece com a \"mini\" linelist chamada symptoms_data\n  \n  pivot_longer(\n    cols = -case_id,                       # pivote todas as colunas exceto case_id \n    names_to = \"nome_sintoma\",             # dê o nome para a nova coluna que contém os sintomas \n    values_to = \"sintoma_esta_presente\") %>%  # dê o nome para a coluna que diz se o sintoma está presente \n\n  \n  mutate(sintoma_esta_presente = replace_na(sintoma_esta_presente, \"desconhecido\")) # converte NA para \"desconhecido\""},{"path":"o-básico-do-ggplot.html","id":"básico-do-ggplot","chapter":"1 O básico do ggplot","heading":"1.2 Básico do ggplot","text":"“Gramática dos gráficos” - ggplot2A criação de gráficos com o ggplot2 é baseada na “adição” de camadas de gráficos e de design uns sobre os outros, com cada comando adicionado aos anteriores com um símbolo de mais (+). O resultado é um objeto tipo gráfico com várias camadas que pode ser salvo, modificado, impresso, exportado, etc.Os objetos de ggplot podem ser altamente complexos, mas ordem básica das camadas geralmente será assim:Comece com o comando de base ggplot() - isto “abre” o ggplot e permite que funções subseqüentes sejam adicionadas com +. Tipicamente, o conjunto de dados também é especificado neste comandoAdicionar camadas “geom” - estas funções visualizam os dados como geometrias (formas), por exemplo, como um gráfico de barras, gráfico de linhas, gráfico de dispersão, histograma (ou uma combinação!). Todas estas funções começam com geom_ como um prefixo.Adicione elementos de desenho ao gráfico, como etiquetas de eixos, título, fontes, tamanhos, esquemas de cores, legendas ou rotação de eixos.Um exemplo simples de código esqueleto é o seguinte. Vamos explicar cada componente nas seções abaixo.","code":"\n# plote os dados das colunas do objeto my_data como pontos vermelhos\n\n\nggplot(data = my_data)+                   # use a base de dados \"my_data\"\n  geom_point(                             # adicione uma camada de pontos \n\n    mapping = aes(x = col1, y = col2),    # mapeie as colunas para os eixos\n    color = \"red\")+                       # outras especificações para o geom\n  labs()+                                 # aqui você pode adicionar títulos, rótulos dos eixos, etc. \n  theme()                                 # aqui você pode ajustar a cor, fonte, tamanho, de elementos que não são orindos dos dados (eixo, título, etc.) "},{"path":"o-básico-do-ggplot.html","id":"ggplot","chapter":"1 O básico do ggplot","heading":"1.3 ggplot()","text":"O comando de abertura de qualquer gráfico ggplot2 é ggplot(). Este comando simplesmente cria uma tela em branco sobre qual se pode adicionar camadas. Ele “abre” o caminho para que outras camadas sejam adicionadas com um símbolo +.Normalmente, o comando ggplot() inclui o dados = argumento para o gráfico. Isto define o conjunto de dados padrão ser utilizado para camadas subsequentes gráfico.Este comando terminará com um + após seus parênteses de fechamento. Isto deixa o comando “aberto”. O ggplot só será executado/aparecerá quando o comando completo incluir uma camada final sem um + final.","code":"\n# Isso irá criar um gráfco que é um painel em branco \nggplot(data = linelist)"},{"path":"o-básico-do-ggplot.html","id":"geoms","chapter":"1 O básico do ggplot","heading":"1.4 Geoms","text":"Uma tela em branco certamente não é suficiente - precisamos criar geometrias (formas) partir de nossos dados (por exemplo, gráficos de barra, histogramas, gráficos de dispersão, gráficos de caixa).Isto é feito adicionando camadas “geoms” ao comando inicial ggplot(). Há muitas funções ggplot2 que criam “geoms”. Cada uma destas funções começa com “geom_”, portanto, vamos nos referir elas genericamente como geom_XXXX(). Há mais de 40 geoms em ggplot2 e muitos outros criados por fãs e contribuidores. Veja-os na galeria ggplot2. Alguns geoms comuns estão listados abaixo:Histogramas - geom_histogram()Gráficos de barras - geom_bar() ou geom_col() (veja “Bar plot” seção)Diagrama de caixas - geom_boxplot()Pontos (por exemplo, gráficos de dispersão) - geom_point()Gráficos de linhas - geom_line() ou geom_path()Linhas de tendência - geom_smooth()Em um gráfico você pode exibir um ou vários geoms. Cada um é adicionado aos comandos anteriores ggplot2 com um +, e eles são plotados sequencialmente de forma que os geoms posteriores sejam plotados sobre os anteriores.","code":""},{"path":"o-básico-do-ggplot.html","id":"ggplot_basics_mapping","chapter":"1 O básico do ggplot","heading":"1.5 Mapeando dados ao gráfico","text":"maioria das “funções geom” devem ser informadas que usar para criar suas formas - portanto, você deve dizer-lhes como devem mapear (atribuir) colunas em seus dados aos componentes gráfico como os eixos, cores das formas, tamanhos das formas, etc. Para maioria dos geoms, os componentes essenciais que devem ser mapeados para colunas nos dados são o eixo x, e (se necessário) o eixo y.Este “mapeamento” ocorre com o argumento mapping =. Os mapeamentos que você fornece ao mapping devem ser envolvidos na função aes(), assim você escreveria algo como mapping = aes(x = col1, y = col2), como mostrado abaixo.Abaixo, comando ggplot(), os dados são definidos como o caso linelist. argumento mapping = aes() coluna age é mapeada para o eixo x, e coluna wt_kg é mapeada para o eixo y.Depois de um +, os comandos de plotagem continuam. Uma forma é criada com função “geom” geom_point(). Este geom herda os mapeamentos comando ggplot() anterior - ele conhece atribuições eixo-coluna e procede para visualizar essas relações como pontos na área gráfico.Como outro exemplo, os seguintes comandos utilizam os mesmos dados, um mapeamento um pouco diferente e um geom diferente. função geom_histogram() requer apenas uma coluna mapeada para o eixo x, pois contagens eixo y são geradas automaticamente.","code":"\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+\n  geom_point()\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()"},{"path":"o-básico-do-ggplot.html","id":"as-estéticas-do-gráfico","chapter":"1 O básico do ggplot","heading":"As estéticas do gráfico","text":"Na terminologia ggplot, uma “estética” gráfico tem um significado específico. Ela se refere uma propriedade visual de dados plotados. Note que “estético” aqui se refere aos dados que estão sendo plotados em geometrias/formas - não ao display ao redor, como títulos, etiquetas de eixos, cor de fundo, que você pode associar com palavra “estética”. ggplot, esses detalhes são chamados de “themes” (temas) e são ajustados dentro de um comando theme() (veja esta seção).Portanto, os objetos aesthetics podem ser cores, tamanhos, transparências, posição, etc. dos dados traçados. Nem todos os geoms terão mesmas opções de aesthetics, mas muitos podem ser usados pela maioria dos geoms. Aqui estão alguns exemplos:shape = Mostra um ponto de geom_point() como um círculo, estrela, triângulo…shape = Mostra um ponto de geom_point() como um círculo, estrela, triângulo…fill = cor de preenchimento (ex. de uma barra ou boxplot)fill = cor de preenchimento (ex. de uma barra ou boxplot)color = linha exterior de uma barra ou boxplot, ou cor ponto se usar o geom_point()color = linha exterior de uma barra ou boxplot, ou cor ponto se usar o geom_point()size = tamanho (ex. grossura da linha, tamanho ponto)size = tamanho (ex. grossura da linha, tamanho ponto)alpha = Transparencia (1 = opaco, 0 = invisível)alpha = Transparencia (1 = opaco, 0 = invisível)binwidth = Largura das classes histogramabinwidth = Largura das classes histogramawidth = Largura das barras gráfico de barraswidth = Largura das barras gráfico de barraslinetype = Tipo de linha (ex. sólida, tracejada, pontilhada)linetype = Tipo de linha (ex. sólida, tracejada, pontilhada)esses objetos gráfico podem ser atribuídos valores de duas maneiras:Atribuindo um valor estático (por exemplo, color = \"blue\") ser aplicado em todas observações plotadasAtribuído uma coluna de dados (por exemplo, “color = hospital”) de tal forma que exibição de cada observação depende de seu valor nessa coluna","code":""},{"path":"o-básico-do-ggplot.html","id":"configurar-para-um-valor-estático","chapter":"1 O básico do ggplot","heading":"Configurar para um valor estático","text":"Se você quiser que estética objeto gráfico seja estática, ou seja - para ser mesma para cada observação nos dados, você escreve sua atribuição dentro geom desejado mas fora de qualquer mapping = aes(). Essas atribuições poderiam ser size = 1 ou color = \"blue\". Aqui estão dois exemplos:primeiro exemplo, o mapping = aes() está comando ggplot() e os eixos são mapeados para colunas de idade e peso nos dados. estética gráfico color =, size =, e alpha = (transparência) são atribuídos valores estáticos. Para maior clareza, isto é feito na função geom_point(), pois você pode adicionar outras geometrias posteriormente que levariam valores diferentes.primeiro exemplo, o mapping = aes() está comando ggplot() e os eixos são mapeados para colunas de idade e peso nos dados. estética gráfico color =, size =, e alpha = (transparência) são atribuídos valores estáticos. Para maior clareza, isto é feito na função geom_point(), pois você pode adicionar outras geometrias posteriormente que levariam valores diferentes.segundo exemplo, o histograma requer apenas o eixo x mapeado para uma coluna. O histograma binwidth =, color =, fill = (cor de preenchimento), e alpha = são novamente definidos dentro geom para valores estáticos.segundo exemplo, o histograma requer apenas o eixo x mapeado para uma coluna. O histograma binwidth =, color =, fill = (cor de preenchimento), e alpha = são novamente definidos dentro geom para valores estáticos.","code":"\n# gráfico de dispersão\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  # configurar mapeamento dos dados e eixos \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)         # configurar a estética estática dos pontos\n\n# histograma\nggplot(data = linelist, mapping = aes(x = age))+       # configurar mapeamento dos dados e eixos \n\n  geom_histogram(              # mostra o histograma\n    binwidth = 7,                # largura das classes\n    color = \"red\",               # cor da linha da classe\n    fill = \"blue\",               # cor de preenchimento da barra\n    alpha = 0.1)                 # transparência da barra"},{"path":"o-básico-do-ggplot.html","id":"responsivo-a-valores-de-uma-coluna","chapter":"1 O básico do ggplot","heading":"Responsivo a valores de uma coluna","text":"alternativa é mapear os argumentos da estética de um gráfico uma coluna (variável) seus dados. Nesta abordagem, exibição deste aesthetics dependerá valor desta observação naquela coluna dos dados. Se os valores da coluna forem contínuos, escala de exibição (legenda) para aquele aesthetics será contínua. Se os valores da coluna forem discretos, legenda exibirá cada valor e os dados plotados aparecerão “agrupados” de forma distinta (leia mais na seção agrupamento desta página).Para conseguir isso, você mapeia esse aesthetics gráfico para um nome de coluna (não entre aspas). Isto deve ser feito *em uma função mapping = aes() (nota: há vários lugares código que você pode fazer estas atribuições de mapeamento, como discutido abaixo)).Dois exemplos estão abaixo.primeiro exemplo, aesthetics color = (de cada ponto) é mapeada para coluna age - e uma escala de cores apareceu na legenda! Por enquanto, basta observar que escala existe - mostraremos como modificá-la em seções posteriores.segundo exemplo, duas novas aesthetics gráfico também são mapeados para colunas (color = e size =), enquanto aesthetics gráfico shape = e alpha = são mapeados para valores estáticos fora de qualquer função mapping = aes().Nota: Os argumentos referentes aos eixos são sempre atribuídos colunas dos dados (não valores estáticos), e isto é sempre feito dentro de mapping = aes().Torna-se importante acompanhar camadas e aesthetics de seus gráficos à medida que vão ficando mais complexos - por exemplo, gráficos com múltiplos geoms. exemplo abaixo, aesthetic size = é atribuída duas vezes - uma para geom_point() e outra para geom_smooth() - ambas vezes como um valor estático.","code":"\n# gráfico de dispersão\n\nggplot(data = linelist,   # escolha os dados\n       mapping = aes(     # mapeie as aesthetics para coluna de valores\n         x = age,           # mapeie o eixo x para idade (coluna age)       \n\n         y = wt_kg,         # mapeie o eixo y para peso (wt_kg)      \n\n         color = age) # mapeie a cor segundo a idade\n\n       )+     \n  geom_point()         # mostre como pontos\n\n# gráfico de dispersão\nggplot(data = linelist,   # escolha os dados\n       mapping = aes(     # mapeie as aesthetics para coluna de valores\n         x = age,           # mapeie o eixo x para idade (coluna age)    \n\n         y = wt_kg,         # mapeie o eixo y para peso (wt_kg) \n\n         color = age,       # mapeie a cor segundo a idade\n\n         size = age))+      # mapeie o tamanho segundo a idade\n\n  geom_point(             # mostre como pontos\n    shape = \"diamond\",      # pontos como losangos (diamantes)\n    alpha = 0.3)            # transparência do ponto a 30%\nggplot(data = linelist,\n       mapping = aes(           # mapeia a aesthetics para as colunas\n         x = age,\n         y = wt_kg,\n         color = age_years)\n       ) + \n  geom_point(                   # addiciona pontos para cada linha de dados\n    size = 1,\n    alpha = 0.5) +  \n  geom_smooth(                  # adiciona uma linha de tendência \n\n    method = \"lm\",              # com um método linear\n    size = 2)                   # tamanho (grossura da linha) de 2"},{"path":"o-básico-do-ggplot.html","id":"ggplot_basics_map_loc","chapter":"1 O básico do ggplot","heading":"Onde incluir os atributos de mapeamento","text":"O mapeamento das aesthetics dentro de mapping = aes() pode ser escrito em vários lugares em seus comandos para criar o gráfico, podendo até mesmo ser escrito mais de uma vez. Isto pode ser escrito comando superior ggplot(), e/ou para cada geom individual abaixo. nuances incluem:atribuições de mapeamento feitas primeiro comando ggplot() serão herdadas como padrão em qualquer geom abaixo, da mesma forma como x = e y = são herdadasOutros mapeamentos feitos dentro de um geom se aplicam somente esse geomDa mesma forma, o parâmetro data = (inglês dados) especificado primeiro comando ggplot() será aplicado por padrão qualquer geom abaixo, mas você também poderia especificar dados novos para cada geom (mas isto é mais complicado).Assim, cada um dos seguintes comandos irá criar o mesmo gráfico:","code":"\n# Esses comandos irão criar o mesmo gráfico\n\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()\n\nggplot(data = linelist)+\n  geom_histogram(mapping = aes(x = age))\n\nggplot()+\n  geom_histogram(data = linelist, mapping = aes(x = age))"},{"path":"o-básico-do-ggplot.html","id":"ggplotgroups","chapter":"1 O básico do ggplot","heading":"Grupos","text":"Você pode facilmente agrupar os dados e “plotar por grupo”. Na verdade, você já fez isso!Atribua coluna de “agrupamento” à aesthetic apropriada gráfico, dentro de um mapping = aes(). Acima, demonstramos isso utilizando valores contínuos quando atribuímos o ponto size = à coluna age (idade). Entretanto, isto funciona da mesma forma para colunas discretas/categóricas.Por exemplo, se você quiser que os pontos sejam exibidos por gênero, você definiria mapping = aes(color = gender). Uma legenda aparece automaticamente. Esta atribuição pode ser feita dentro comando mapping = aes() ggplot() topo (e ser herdada pelo geom), ou pode ser definida em um mapping = aes() separado dentro geom. Ambas abordagens são mostradas abaixo:Observe que, dependendo geom, será necessário utilizar argumentos diferentes para agrupar os dados. Para geom_point() você provavelmente utilizará color =, shape = ou size =. Enquanto para geom_bar() é mais provável que você utilize fill =. Isto depende apenas geom e tipo de aesthetic gráfico que você deseja usar para refletir os agrupamentos.Para sua informação - forma mais básica de agrupar os dados é utilizando apenas o argumento group = dentro mapping = aes(). Entretanto, isto por si só não mudará cores, o preenchimento ou formas. Tampouco criará uma legenda. entanto, os dados são agrupados, de modo que exibições estatísticas poderão ser afetadas.Para ajustar ordem dos grupos em um gráfico, veja página [Dicas para o ggplot] ou página em [Fatores]. Há muitos exemplos de gráficos agrupados nas seções abaixo sobre plotagem de dados contínuos e categóricos.","code":"\nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg, color = gender))+\n  geom_point(alpha = 0.5)\n# Este código alternativo produz o mesmo gráfico \nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg))+\n  geom_point(\n    mapping = aes(color = gender),\n    alpha = 0.5)"},{"path":"o-básico-do-ggplot.html","id":"ggplot_basics_facet","chapter":"1 O básico do ggplot","heading":"1.6 Facetas / Pequenos-Múltiplos","text":"Facetas, ou “pequenos-múltiplos”, são usadas para dividir uma parcela em uma figura de vários painéis, com um painel (“faceta”) por grupo de dados. O mesmo tipo de gráfico é criado várias vezes, cada um usando um subgrupo mesmo conjunto de dados.O Facetamento (Faceting) é uma funcionalidade que vem com ggplot2, portanto legendas e eixos dos “painéis” de faceta são automaticamente alinhados. Há outros pacotes discutidos na página [Dicas para o ggplot] que são usados para combinar gráficos completamente diferentes (cowplot e patchwork) em uma única figura.O facetamento é feito com uma das seguintes funções ggplot2:facet_wrap() Para mostrar um painel diferente para cada nível de uma variável única. Um exemplo disso poderia ser mostrar uma curva epidêmica diferente para cada hospital de uma região. facetas são ordenadas alfabeticamente, menos que variável seja um fator com outra ordenação definida.Você pode invocar certas opções para determinar o layout das facetas, por exemplo nrow = 1 ou ncol = 1 para controlar o número de linhas ou colunas dentro das quais facetas estão dispostas.facet_grid() Isto é utilizado quando se deseja trazer uma segunda variável para disposição das facetas. Aqui cada painel de uma “grade” (grid) mostra interseção entre os valores em duas colunas. Por exemplo, curvas epidêmicas para cada combinação hospital-idade com hospitais ao longo topo (colunas) e faixas etárias ao longo dos lados (linhas).“nrow” e “ncol” não são relevantes, pois os subgrupos são apresentados em um gridCada uma destas funções aceita uma sintaxe de fórmula para especificar (s) coluna(s) de faceta(s). Ambas aceitam até duas colunas, uma de cada lado de um til `~’.Para facet_wrap() na maioria das vezes você escreverá apenas uma coluna precedida por um til ~ como facet_wrap(~hospital). Entretanto, você pode escrever duas colunas facet_wrap(outcome ~ hospital) - cada combinação única será exibida em um painel separado, mas não serão dispostas em um grid. Os cabeçalhos mostrarão termos combinados e estes não terão uma lógica específica para colunas vs. linhas. Se você estiver fornecendo apenas uma variável facetada, um ponto . é utilizado como um espaço reservado outro lado da fórmula - veja os exemplos de código.Para facet_wrap() na maioria das vezes você escreverá apenas uma coluna precedida por um til ~ como facet_wrap(~hospital). Entretanto, você pode escrever duas colunas facet_wrap(outcome ~ hospital) - cada combinação única será exibida em um painel separado, mas não serão dispostas em um grid. Os cabeçalhos mostrarão termos combinados e estes não terão uma lógica específica para colunas vs. linhas. Se você estiver fornecendo apenas uma variável facetada, um ponto . é utilizado como um espaço reservado outro lado da fórmula - veja os exemplos de código.Para facet_grid() você também pode especificar uma ou duas colunas para fórmula (grid linhas ~ colunas). Se você quiser especificar apenas uma, você pode colocar um ponto . outro lado til como facet_grid(. ~ hospital) ou facet_grid(hospital ~ .).Para facet_grid() você também pode especificar uma ou duas colunas para fórmula (grid linhas ~ colunas). Se você quiser especificar apenas uma, você pode colocar um ponto . outro lado til como facet_grid(. ~ hospital) ou facet_grid(hospital ~ .).facetas podem rapidamente conter uma quantidade avassaladora de informações - é bom garantir que você não tenha muitos níveis de cada variável que você escolher facetar. Aqui estão alguns exemplos rápidos com o conjunto de dados sobre malária (ver [Baixar manual e dados]) que consiste em contagens diárias de casos de malária para estabelecimentos, por faixa etária.seguir, importamos e fazemos algumas modificações rápidas para simplificar:primeiras 50 filas dos dados sobre malária estão abaixo. Observe que existe uma coluna malaria_tot, mas também colunas para contagens por faixa etária (estas serão utilizadas segundo exemplo referente ao facet_grid() ).","code":"\n# Esses dados correspondem a contagens diárias de malária, por estabelecimento-dia \nmalaria_data <- import(here(\"data\", \"malaria_facility_count_data.rds\")) %>%  # importar\n  select(-submitted_date, -Province, -newid)                                 # remove colunas desnecessárias"},{"path":"o-básico-do-ggplot.html","id":"facet_wrap","chapter":"1 O básico do ggplot","heading":"facet_wrap()","text":"momento, vamos nos concentrar nas colunas malaria_tot e District. Ignore por enquanto colunas de contagem por idade. Vamos traçar curvas epidêmicas com geom_col(), que produz uma coluna para cada dia com altura eixo y sendo especificada com o valor obtido na coluna malaria_tot (os dados já são contagens diárias, então utilizamos geom_col() - veja seção “Bar plot” abaixo).Quando adicionamos o comando facet_wrap(), especificamos um til e depois coluna para facetar sobre (neste caso, District). Você pode colocar outra coluna lado esquerdo til - isto criará uma faceta para cada combinação - mas recomendamos que você faça isto com facet_grid() em seu lugar. Neste caso de uso, uma faceta é criada para cada valor único de District.","code":"\n# Um gráfico com facetas por distrito \n\nggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_col(width = 1, fill = \"darkred\") +       # plote a contagem como colunas \n  theme_minimal()+                              # simplifique os paineis de fundo\n  labs(                                         # aficione rótulos, títulos, etc. \n    x = \"Data dos registros\",\n    y = \"Casos de malária\",\n    title = \"Casos de malária por distrito\") +\n  facet_wrap(~District)                       # As facetas são criadas"},{"path":"o-básico-do-ggplot.html","id":"facet_grid","chapter":"1 O básico do ggplot","heading":"facet_grid()","text":"Podemos utilizar uma abordagem facet_grid() para cruzar duas variáveis. Digamos que queremos cruzar o Distrito (District) e idade (age). Bem, precisamos fazer algumas transformações de dados nas colunas de idade para obter esses dados formato “longo”, preferido pelo ggplot. Todos os grupos etários têm suas próprias colunas - queremo-los em uma única coluna chamada faixa_etaria e outra chamada num_casos. Consulte página em [Pivoteamento de dados] para obter mais informações sobre este processo.Agora primeiras 50 linhas dos dados aparecem assim:Quando você passa duas variáveis para facet_grid(), o mais fácil é utilizar notação de fórmula (por exemplo x ~ y) onde x corresponde às linhas e y às colunas. Aqui está o gráfico, utilizando facet_grid() para mostrar os gráficos para cada combinação das colunas faixa_etaria e District.","code":"\nmalaria_age <- malaria_data %>%\n  select(-malaria_tot) %>% \n  pivot_longer(\n    cols = c(starts_with(\"malaria_rdt_\")),  # escolha as colunas que quer pivotear para o formato longo\n    names_to = \"faixa_etaria\",      # column names become age group\n    values_to = \"num_casos\"      # values to a single column (num_casos)\n  ) %>%\n  mutate(\n    faixa_etaria = str_replace(faixa_etaria, \"malaria_rdt_\", \"\"),\n    faixa_etaria = forcats::fct_relevel(faixa_etaria, \"5-14\", after = 1))\nggplot(malaria_age, aes(x = data_date, y = num_casos)) +\n  geom_col(fill = \"darkred\", width = 1) +\n  theme_minimal()+\n  labs(\n    x = \"Data dos registros\",\n    y = \"Casos de malária\",\n    title = \"Casos de malária por distrito e faixa etária\"\n  ) +\n  facet_grid(District ~ faixa_etaria)"},{"path":"o-básico-do-ggplot.html","id":"eixos-livres-ou-fixos","chapter":"1 O básico do ggplot","heading":"Eixos livres ou fixos","text":"escalas de eixos exibidas quando realizamos o facetamento é por padrão mesma (ou seja, fixa) em todas facetas. Isto é útil para comparação cruzada, mas nem sempre apropriado.Ao utilizar facet_wrap() ou facet_grid(), podemos adicionar scales = \"free_y\" para “liberar” os eixos y dos painéis para escalar adequadamente seu subconjunto de dados. Isto é particularmente útil se contagens reais forem pequenas para uma das subcategorias e se tendências forem difíceis de se observar de outra forma. Em vez de “free_y” também podemos escrever “free_x” para fazer o mesmo para o eixo x (por exemplo, para datas) ou apenas “free” para ambos os eixos. Note que em facet_grid, escala y será mesma para facetas na mesma linha, e escala x será mesma para facetas na mesma coluna.Ao utilizar somente facet_grid, podemos adicionar space = \"free_y\" ou space = \"free_x\" para que altura ou largura real da faceta seja ponderada para os valores da figura dentro. Isto só funciona se scales = \"free\" (y ou x) já estiver aplicado.","code":"\n# Eixo y livre\n\n\nggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_col(width = 1, fill = \"darkred\") +       # plote os dados de contagem como colunas\n  theme_minimal()+                              # simplifique os painel de fundo\n  labs(                                         # adicione rótulos, título, etc.\n\n    x = \"Data de registro\",\n    y = \"Casos de malária\",\n    title = \"Casos de malária por distrito - Eixos x e y 'livres'\") +\n  facet_wrap(~District, scales = \"free\")        # as facetas são criadas"},{"path":"o-básico-do-ggplot.html","id":"ordem-dos-fatores-nas-facetas","chapter":"1 O básico do ggplot","heading":"Ordem dos fatores nas facetas","text":"Veja este post sobre como reordenar os níveis de um fator dentro de cada faceta.","code":""},{"path":"o-básico-do-ggplot.html","id":"armazenando-gráficos","chapter":"1 O básico do ggplot","heading":"1.7 Armazenando gráficos","text":"","code":""},{"path":"o-básico-do-ggplot.html","id":"salvando-gráficos","chapter":"1 O básico do ggplot","heading":"Salvando gráficos","text":"Por padrão, quando você executa um comando ’ggplot(), o gráfico será apresentado painel Plots RStudio. Entretanto, você também pode salvar o gráfico como um objeto utilizando o operador de atribuição<-e dando-lhe um nome. Então, ele não será exibido menos que o próprio nome objeto seja executado. Você também pode imprimi-lo envolvendo o nome gráfico comprint()`, mas isto só é necessário em certas circunstâncias, como se o gráfico criado dentro de um loop utilizado para imprimir vários gráficos de uma vez (veja página [Iteração, laços e listas]).","code":"\n# Atribua o gráfico a um objeto\n\n\nage_by_wt <- ggplot(data = linelist, mapping = aes(x = age_years, y = wt_kg, color = age_years))+\n  geom_point(alpha = 0.1)\n\n# exiba\nage_by_wt    "},{"path":"o-básico-do-ggplot.html","id":"modificando-gráficos-salvos","chapter":"1 O básico do ggplot","heading":"Modificando gráficos salvos","text":"Uma coisa legal sobre ggplot2 é que você pode definir um gráfico (como acima), e depois adicionar camadas ele começando com seu nome. Você não precisa repetir todos os comandos que criaram o gráfico original!Por exemplo, para modificar o gráfico age_by_wt que foi definida acima, para incluir uma linha vertical aos 50 anos de idade, basta adicionar um + e começar adicionar camadas adicionais ao gráfico.","code":"\nage_by_wt+\n  geom_vline(xintercept = 50)"},{"path":"o-básico-do-ggplot.html","id":"exportando-gráficos","chapter":"1 O básico do ggplot","heading":"Exportando gráficos","text":"exportação de gráficos feitos ggplot é facilitada com função ggsave() de ggplot2. Ela pode funcionar de duas maneiras:Especifique o nome objeto gráfico, depois o caminho arquivo e o nome com extensão\nPor exemplo: ggsave(my_plot, (\"plots\", \"my_plot.png\"))\nEspecifique o nome objeto gráfico, depois o caminho arquivo e o nome com extensãoPor exemplo: ggsave(my_plot, (\"plots\", \"my_plot.png\"))Execute o comando com apenas o parâmetro caminho de arquivo, para salvar o último gráfico que foi feito\nPor exemplo: ggsave((\"plots\", \"my_plot.png\"))\nExecute o comando com apenas o parâmetro caminho de arquivo, para salvar o último gráfico que foi feitoPor exemplo: ggsave((\"plots\", \"my_plot.png\"))Você pode exportar como png, pdf, jpeg, tiff, bmp, svg, ou vários outros tipos de arquivo, especificando extensão arquivo caminho arquivo.Você também pode especificar os argumentos width =, (largura) height = (altura), e units = (ou “”, “cm”, ou “mm”). Você também pode especificar dpi = com um número para resolução da imagem ser salva (por exemplo, 300). Veja os detalhes da função digitando ?ggsave ou lendo documentação online.Lembre-se de que você pode utilizar sintaxe da função () para fornecer o caminho de arquivo desejado. Consulte página [Importar e exportar] para obter mais informações.","code":""},{"path":"o-básico-do-ggplot.html","id":"rótulos","chapter":"1 O básico do ggplot","heading":"1.8 Rótulos","text":"Certamente você vai querer adicionar ou ajustar os rótulos (elementos de texto) gráfico. Estes ajustes são mais facilmente feitos dentro da função labs() que é adicionada ao gráfico com + tal como os geoms eram.Dentro de labs() você pode fornecer strings para estes parâmetros:x = e y = O título eixo x e eixo y (etiquetas)title = O título principal gráficosubtitle = O subtítulo gráfico, em texto menor abaixo títulocaption = legenda gráfico, na parte inferior direita por padrãoAqui está um gráfico que fizemos anteriormente, mas com rótulos mais bonitos:Observe como na atribuição título utilizamos str_glue() pacote stringr para implantar código R dinâmico dentro texto da string. O legenda mostrará os “Dados partir de”: “data que reflete data máxima de hospitalização na linelist”. Leia mais sobre isto na página em [Caracteres e strings].Uma nota sobre especificação título da legenda: Não há nenhum argumento de “título da legenda”, pois você poderia ter múltiplas escalas em sua legenda. Dentro de labs(), você pode escrever o argumento da aesthetic gráfico utilizada para criar legenda, e fornecer o título desta forma. Por exemplo, acima atribuímos color = age para criar legenda. Portanto, fornecemos color = labs() e atribuímos o título da legenda desejada (“Idade” com maiúsculo). Se você criar legenda com aes(fill = COLUMN), então em labs() você escreveria fill = para ajustar o título dessa legenda. seção sobre escalas de cores na página [Dicas para o ggplot] fornece mais detalhes sobre edição de legendas, e uma abordagem alternativa utilizando funções scales_().","code":"\nage_by_wt <- ggplot(\n  data = linelist,   # especifique o objeto com os dados\n  mapping = aes(     # mapeie as aesthetics para colunas desses dados\n         x = age,           # mapeie o eixo x para idade (coluna age)            \n         y = wt_kg,         # mapeie o eixo x para peso (coluna wt_kg)       \n         color = age))+     # mapeie a cor para a idade\n  geom_point()+           # mostre os dados como pontos\n  labs(\n    title = \"Distribuição de idade e peso\",\n\n    subtitle = \"Surto de Ebola fictício, 2014\",\n    x = \"Idade em anos\",\n    y = \"Peso em quilos\",\n    color = \"Idade\",\n    caption = stringr::str_glue(\"Dados como em {max(linelist$date_hospitalisation, na.rm=T)}\"))\n\nage_by_wt"},{"path":"o-básico-do-ggplot.html","id":"ggplot_basics_themes","chapter":"1 O básico do ggplot","heading":"1.9 Temas","text":"Uma das melhores partes ggplot2 é quantidade de controle que você tem sobre o gráfico - você pode definir qualquer coisa! Como mencionado acima, o desenho gráfico que não está relacionado às formas/geometrias dos dados são ajustados dentro da função theme(). Por exemplo, cor de fundo gráfico, presença/ausência de linhas de grade e fonte/tamanho/cor/alinhamento texto (títulos, subtítulos, legendas, texto eixo…). Estes ajustes podem ser feitos de uma de duas maneiras:Adicionar um tema completo theme_()função para fazer ajustes de varredura - estes incluem theme_classic(), theme_minimal(), theme_dark(), theme_light()theme_grey(),theme_bw()` entre outrosAdicionar um tema completo theme_()função para fazer ajustes de varredura - estes incluem theme_classic(), theme_minimal(), theme_dark(), theme_light()theme_grey(),theme_bw()` entre outrosAjuste cada pequeno aspecto gráfico individualmente dentro de theme()Ajuste cada pequeno aspecto gráfico individualmente dentro de theme()","code":""},{"path":"o-básico-do-ggplot.html","id":"temas-completos","chapter":"1 O básico do ggplot","heading":"Temas completos","text":"Como eles são bastante diretos, demonstraremos funções temáticas completas abaixo e não descreveremos mais aqui. Note que quaisquer micro-ajustes com theme() devem ser feitos após utilização de um tema completo.Escreva-os com parênteses vazios.","code":"\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme classic\")+\n  theme_classic()\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme bw\")+\n  theme_bw()\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme minimal\")+\n  theme_minimal()\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme gray\")+\n  theme_gray()"},{"path":"o-básico-do-ggplot.html","id":"modifique-o-tema","chapter":"1 O básico do ggplot","heading":"Modifique o tema","text":"função theme() pode levar um grande número de argumentos, cada um dos quais edita um aspecto muito específico gráfico. Não há como cobrir todos os argumentos, mas vamos descrever o padrão geral para eles e mostrar-lhe como encontrar o nome argumento que você precisa. sintaxe básica é esta:Dentro de theme() escreva o nome argumento para o elemento gráfico que você deseja editar, como plot.title =Fornecer uma função element_() para o argumento\nNa maioria das vezes, utilize element_text(), mas outros incluem element_rect() para cores de fundo de tela, ou element_blank() para remover os elementos gráfico\nNa maioria das vezes, utilize element_text(), mas outros incluem element_rect() para cores de fundo de tela, ou element_blank() para remover os elementos gráficoDentro da função element_(), escreva atribuições de argumentos para fazer os ajustes finos que você desejaEssa descrição foi bastante abstrata, portanto, aqui estão alguns exemplos.O gráfico abaixo parece bastante tolo, mas serve para mostrar uma variedade de maneiras de ajustar seu gráfico.Começamos com o gráfico age_by_wt definido logo acima e acrescentamos theme_classic()Para ajustes mais finos, adicionamos theme() e incluímos um argumento para cada elemento gráfico ser ajustadoPode ser bom organizar os argumentos em seções lógicas. Para descrever apenas alguns dos utilizados abaixo:legend.position = é único sentido de aceitar valores simples como “bottom”, “top”, “left”, e “right”. Mas geralmente, os argumentos relacionados ao texto exigem que você coloque os detalhes element_text().tamanho título com element_text(size = 30).O alinhamento horizontal título com element_text(hjust = 0) (da direita para esquerda)O subtítulo está em itálico com element_text(face = \"italic\")Aqui estão alguns argumentos especialmente comuns em theme(). Você reconhecerá alguns padrões, tais como acrescentar .x' ou.y’ para aplicar mudança somente em um eixo.axis.ticks = element_blank() |Remove marcações de escalas eixo\naxis.line = element_line() |Linhas eixo (parâmetros: colour, linetype: solid dashed dotted etc)\nstrip.text = element_text() |Texto rótulo da faceta (parâmetros: colour, face, size, angle…)\nstrip.background = element_rect()|Rótulo da faceta (parâmetros: fill, colour, size…)Mas há tantos argumentos para temas! Como eu poderia lembrar de todos eles? Não se preocupe - é impossível lembrar-se de todos eles. Felizmente, existem algumas ferramentas para ajudá-lo:documentação sobre modificação tema, que tem uma lista completa.DICA: Rode theme_get() ggplot2 para listar os mais de 90 argumentos da função theme() console .DICA: Se você em algum momento quiser remover um elemento gráfico, você também o pode fazer com o theme(). Apenas passe o parâmetro element_blank() para um argumento para que ele desapareca completamente. Para legendas, configure legend.position = \"none\".","code":"\nage_by_wt + \n  theme_classic()+                                 # ajustes de tema pré-definidos\n  theme(\n    legend.position = \"bottom\",                    # move a legenda  para baixo\n    \n    plot.title = element_text(size = 30),          # ajusta o tamanho do título para 30\n    plot.caption = element_text(hjust = 0),        # alinha a Legenda da figura a esquerda\n    plot.subtitle = element_text(face = \"italic\"), # deixa subtítulo em itálico\n\n    \n    axis.text.x = element_text(color = \"red\", size = 15, angle = 90), # ajusta o texto o eixo x \n    axis.text.y = element_text(size = 15),         # ajusta o texto o eixo y\n    \n    axis.title = element_text(size = 20)           # ajusta o texto de ambos os eixos\n    )     "},{"path":"o-básico-do-ggplot.html","id":"cores","chapter":"1 O básico do ggplot","heading":"1.10 Cores","text":"Por favor veja seção sobre escala de cores na página de dicas ggplot.","code":""},{"path":"o-básico-do-ggplot.html","id":"usando-o-pipe-no-ggplot2","chapter":"1 O básico do ggplot","heading":"1.11 Usando o pipe (%>%) no ggplot2","text":"Ao utilizar pipes (%>%) para limpar e transformar seus dados, é fácil passar os dados transformados em ggplot().Os pipes que passam o conjunto de dados de função para função passarão ser um símbolo de mais + assim que função ggplot() chamada. Observe que, neste caso, não há necessidade de especificar o argumento data = (data), pois este é automaticamente definido como o conjunto de dados que vinha sendo usado pipe.Esta é aparência que pode ter:","code":"\nlinelist %>%                                                     # comece com a linelist\n  select(c(case_id, fever, chills, cough, aches, vomit)) %>%     # selecione as colunas\n  pivot_longer(                                                  # faça o pivotamento para ficar mais longo\n    cols = -case_id,                                  \n    names_to = \"nome_sintoma\",\n    values_to = \"sintoma_esta_presente\") %>%\n  mutate(                                                        # substitua valores faltantes\n    sintoma_esta_presente = replace_na(sintoma_esta_presente, \"desconhecido\")) %>% \n  \n  ggplot(                                                        # comece o gráfico!\n    mapping = aes(x = nome_sintoma, fill = sintoma_esta_presente))+\n  geom_bar(position = \"fill\", col = \"black\") +                    \n  theme_classic() +\n  labs(\n    x = \"Sintoma\",\n    y = \"Status do sintoma (proporção)\"\n  )"},{"path":"o-básico-do-ggplot.html","id":"fazer-gráficos-de-dados-contínuos","chapter":"1 O básico do ggplot","heading":"1.12 Fazer gráficos de dados contínuos","text":"Ao longo desta página, você já viu muitos exemplos de gráficos de dados contínuos. Aqui nós os consolidamos brevemente e apresentamos algumas variações.visualizações aqui abordadas incluem:Gráficos para uma variável contínua:\nHistograma, um gráfico clássico para apresentar distribuição de uma variável contínua.\nDiagramas de caixa (box-plots), para mostrar os percentis 25%, 50% e 75%, pontas de cauda da distribuição e outliers (limitações importantes).\nGráfico Jitter, para mostrar todos os valores como pontos que estão ‘tremidos’ para que possam (principalmente) ser todos vistos, mesmo onde dois têm o mesmo valor.\nGráfico Violino, mostrar distribuição de uma variável contínua com base na largura simétrica ‘violino’.\nGráfico Sina, são uma combinação de gráficos de jitter e violino, onde são mostrados pontos individuais mas na forma simétrica da distribuição (via ggforce pacote). (Nota Tradutor: Jitter em inglês significa “agitado, nervoso” e se remete ao fato dos pontos, nesse gráfico ficarem mais “espalhados” de forma não ficarem sobrepostos )\nHistograma, um gráfico clássico para apresentar distribuição de uma variável contínua.Diagramas de caixa (box-plots), para mostrar os percentis 25%, 50% e 75%, pontas de cauda da distribuição e outliers (limitações importantes).Gráfico Jitter, para mostrar todos os valores como pontos que estão ‘tremidos’ para que possam (principalmente) ser todos vistos, mesmo onde dois têm o mesmo valor.Gráfico Violino, mostrar distribuição de uma variável contínua com base na largura simétrica ‘violino’.Gráfico Sina, são uma combinação de gráficos de jitter e violino, onde são mostrados pontos individuais mas na forma simétrica da distribuição (via ggforce pacote). (Nota Tradutor: Jitter em inglês significa “agitado, nervoso” e se remete ao fato dos pontos, nesse gráfico ficarem mais “espalhados” de forma não ficarem sobrepostos )Gráfico de dispersão Para duas variáveis contínuas.Gráficos de calor para três variáveis contínuas (ligados à página [gráficos de calor])","code":""},{"path":"o-básico-do-ggplot.html","id":"histogramas","chapter":"1 O básico do ggplot","heading":"Histogramas","text":"Os histogramas podem parecer gráficos de barras, mas são distintos porque medem distribuição de uma variável contínua. Não há espaços entre “barras”, e apenas uma coluna é fornecida ao geom_histogram().Abaixo está o código para gerar histogramas, que agrupam dados contínuos em intervalos e exibem em barras adjacentes de altura variável. Isto é feito utilizando o geom_histogram(). Ver secção “Gráfico de barra” da página básico ggplot para compreender diferença entre geom_histogram(), geom_bar(), e geom_col().Mostraremos distribuição das idades dos casos. Dentro de mapping = aes() especifique coluna de que deseja ver distribuição. Pode atribuir esta coluna ao eixo x ou ao eixo y.linhas serão atribuídas “caixas/classes” com base na sua idade numérica, e estas classes serão representadas graficamente por barras. Se especificar um número de classes com aesthetic bins =, os pontos de quebra são uniformemente espaçados entre os valores mínimo e máximo histograma. Se bins = não estiver especificado, será adivinhado um número apropriado de classes e esta mensagem será exibida após o gráfico:Se não quiser especificar um número de classes para bins =, pode, em alternativa, especificar binwidth = nas unidades eixo. Apresentamos alguns exemplos que mostram diferentes quantidades e larguras de classes:Para obter proporções suavizadas, pode utilizar geom_density():Para obter um histograma “empilhado” (de uma coluna contínua de dados), você pode fazer uma das seguintes ações:Utilize geom_histogram() com o fill = argumento dentro de aes() e atribuído à coluna de agrupamento, ouUtilize geom_freqpoly(), que provavelmente é mais fácil de ler (você ainda pode definir binwidth =)Para ver proporções de todos os valores, defina o y = after_stat(density) (utilize esta sintaxe exatamente - não alterada para seus dados). Nota: estas proporções mostrarão por grupo.Cada uma delas é mostrada abaixo (*notar utilização de color = vs. fill = em cada uma):Se você quiser se divertir, tente ‘geom_density_ridges’ pacote ggridges* (vinheta aqui.Leia mais em detalhes sobre histogramas tidyverse página em geom_histogram().","code":"## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n# A) Histograma regular\nggplot(data = linelist, aes(x = age))+  # forneça a variável do eixo x\n  geom_histogram()+\n  labs(title = \"A) Histograma padrão (30 classes)\")\n\n# B) Mais classes\nggplot(data = linelist, aes(x = age))+  # forneça a variável do eixo x\n  geom_histogram(bins = 50)+\n  labs(title = \"B) Ajustado para 50 classes\")\n\n# C) Menos classes\nggplot(data = linelist, aes(x = age))+  # forneça a variável do eixo x\n  geom_histogram(bins = 5)+\n  labs(title = \"C) Ajustado para 5 classes\")\n\n\n# D) Mais classes\nggplot(data = linelist, aes(x = age))+  # forneça a variável do eixo x\n  geom_histogram(binwidth = 1)+\n  labs(title = \"D) Largura da classe = 1\")\n# Frequencia com eixos de proporção, suavizadas. \nggplot(data = linelist, mapping = aes(x = age)) +\n  geom_density(size = 2, alpha = 0.2)+\n  labs(title = \"Densidade proporcional\")\n\n# Frequência empilhada com eixo proporcional, suavizada \n\nggplot(data = linelist, mapping = aes(x = age, fill = gender)) +\n  geom_density(size = 2, alpha = 0.2, position = \"stack\")+\n  labs(title = \" Densidades proporcionais 'empilhada'\")\n# Histograma *empilhado*\n\nggplot(data = linelist, mapping = aes(x = age, fill = gender)) +\n  geom_histogram(binwidth = 2)+\n  labs(title = \"histograma 'empilhado'\")\n\n# Frequência\nggplot(data = linelist, mapping = aes(x = age, color = gender)) +\n  geom_freqpoly(binwidth = 2, size = 2)+\n  labs(title = \"Polígono de frequência\")\n\n# Freqüência com eixo de proporção \nggplot(data = linelist, mapping = aes(x = age, y = after_stat(density), color = gender)) +\n  geom_freqpoly(binwidth = 5, size = 2)+\n  labs(title = \"Polígono de frequência proporcional\")\n\n# Freqüência com eixo de proporção , suavizado\nggplot(data = linelist, mapping = aes(x = age, y = after_stat(density), fill = gender)) +\n  geom_density(size = 2, alpha = 0.2)+\n  labs(title = \"Proportional, suavizado com geom_density()\")"},{"path":"o-básico-do-ggplot.html","id":"box-plots","chapter":"1 O básico do ggplot","heading":"Box plots","text":"Os bos-plots são comuns, mas têm limitações importantes. Elas podem obscurecer distribuição real - por exemplo, uma distribuição bi-modal. Veja este galeria de gráficos R e este artigo data--viz para mais detalhes. Entretanto, eles exibem bem faixa inter-quartil e aberturas - de modo que podem ser sobrepostos em cima de outros tipos de gráficos que mostram distribuição em mais detalhes.Abaixo lembramos os vários componentes de um boxplot:Ao utilizar geom_boxplot() para criar diagrama de caixas (box-plot), você geralmente mapeia apenas um eixo (x ou y) dentro de aes(). O eixo especificado determina se parcelas são horizontais ou verticais.Na maioria dos geoms, você cria um gráfico por grupo mapeando uma estética como color = ou fill = para uma coluna dentro de aes(). Entretanto, para box-plots, isso é conseguido atribuindo coluna de agrupamento ao eixo não atribuído (x ou y). Abaixo está o código para um boxplot de todos os valores de idade conjunto de dados, e o segundo é o código para exibir um box plot para cada sexo (não-faltante) conjunto de dados. Observe que os valores NA (ausentes) aparecerão como um gráfico de caixa separado, menos que seja removido. Neste exemplo, também definimos o fill para coluna outcome, para que cada gráfico seja de uma cor diferente - mas isto não é necessário.Para obter o código para adicionar um boxplot às bordas de um gráfico de dispersão (gráficos “marginais”) veja página [Dicas para o ggplot].","code":"\n# A) Boxplot geral\nggplot(data = linelist)+  \n  geom_boxplot(mapping = aes(y = age))+   # apenas o y é mapeado\n  labs(title = \"A) Boxplot geral\")\n\n# B) Box plot por grupo\nggplot(data = linelist, mapping = aes(y = age, x = gender, fill = gender)) + \n  geom_boxplot()+                     \n  theme(legend.position = \"none\")+   # remove a legenda\n  labs(title = \"B) Box plot por sexo\")      "},{"path":"o-básico-do-ggplot.html","id":"gráficos-violino-jitter-sina","chapter":"1 O básico do ggplot","heading":"Gráficos: Violino, jitter, sina","text":"code creating violin plots (geom_violin) jitter plots (geom_jitter) show distributions. can specify fill color also determined data, inserting options within aes().Você pode combinar os dois utilizando função geom_sina() pacote ggforce. Esse gráfico traça os pontos gráfico jitter na forma gráfico de violino. Quando sobrepostos (ajustando transparências), isto pode ser mais fácil de interpretar visualmente.","code":"\n# A) Gráfico de jitter por grupo\n\nggplot(data = linelist %>% drop_na(outcome),      # remove valores faltantes\n       mapping = aes(y = age,                     # variável contínua escolhida\n           x = outcome,                           # variável de agrupamento\n           color = outcome))+                     # variável para cor\n  geom_jitter()+                                  # criar o gráfico ´Jitter\n  labs(title = \"A) Um grafico 'jitter' por gênero\" )  \n\n\n\n# B) Gráfico de violino\nggplot(data = linelist %>% drop_na(outcome),       # remove valores faltantes\n       mapping = aes(y = age,                      # Variável contínua\n           x = outcome,                            # Variável de agrupamento\n           fill = outcome))+                       # variável de cor para preenchimento\n  geom_violin()+                                   # criar o gráfico de violino\n  labs(title = \"B) Gráfico de violino por gênero\")    \n# Um gráfico Sina por grupo\nggplot(\n  data = linelist %>% drop_na(outcome), \n  aes(y = age,           # variável numérica\n      x = outcome)) +    # variável de agrupamento\n  geom_violin(\n    aes(fill = outcome), # mapeie o preenchimento (cor do fundo do violino) segundo uma coluna\n    color = \"white\",     # borda exterior branca\n    alpha = 0.2)+        # transparencia\n  geom_sina(\n    size=1,                # Mude o tamanho do \"jitter\"\n    aes(color = outcome))+ # cor dos pontos\n  scale_fill_manual(       # defina as cores de preenchimento do violino\n    values = c(\"Death\" = \"#bf5300\", #óbito\n              \"Recover\" = \"#11118c\")) + # recuperado\n  scale_color_manual(      # defina as cores de preenchimento dos pontos\n    values = c(\"Death\" = \"#bf5300\", \n              \"Recover\" = \"#11118c\")) + \n  theme_minimal() +                                # Remove o fundo cinza\n  theme(legend.position = \"none\") +                # Remove legendas desnecessárias\n  labs(title = \"Gráfico Sina e Violino por gênero, com formtações extras\")      "},{"path":"o-básico-do-ggplot.html","id":"duas-variáveis-contínuas","chapter":"1 O básico do ggplot","heading":"Duas variáveis contínuas","text":"Seguindo uma sintaxe semelhante, geom_point() permitirá traçar duas variáveis contínuas uma contra outra em uma gráfico de dispersão. Isto é útil para mostrar os valores reais ao invés de suas distribuições. Um gráfico básico de dispersão de idade vs peso é mostrado em (). Em (B) utilizamos novamente facet_grid() para mostrar relação entre duas variáveis contínuas na linelist.","code":"\n#Gráfico de dispersão básico para idade e peso\nggplot(data = linelist, \n       mapping = aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"A) Gráfico de dispesão para idade e peso\")\n\n# Gráfico de dispersão de peso e idade por gênero e desfecho para o Ebola \nggplot(data = linelist %>% drop_na(gender, outcome), # filtro mantém apenas gênero e desfecho não faltantes\n       mapping = aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"B) Gráfico de dispersão do peso por idade facetado para gênero e desfecho\")+\n  facet_grid(gender ~ outcome) "},{"path":"o-básico-do-ggplot.html","id":"três-variáveis-contínuas","chapter":"1 O básico do ggplot","heading":"Três variáveis contínuas","text":"Você pode exibir três variáveis contínuas utilizando o argumento fill = para criar um gráfico de calor. cor de cada “célula” irá refletir o valor da terceira coluna contínua de dados. Veja página [Dicas para o ggplot] e página em [Heat plots] para mais detalhes e vários exemplos.Existem maneiras de fazer gráficos 3D em R, mas para epidemiologia aplicada, estes são freqüentemente difíceis de interpretar e, portanto, menos úteis para tomada de decisões.","code":""},{"path":"o-básico-do-ggplot.html","id":"gráficos-de-dados-categóricos","chapter":"1 O básico do ggplot","heading":"1.13 Gráficos de dados categóricos","text":"Dados categóricos podem ser variáveis tipo caractere ou variáveis lógicas (TRUE/FALSE. VERDADEIRO/FALSO), ou ainda fatores (veja página [Fatores]).","code":""},{"path":"o-básico-do-ggplot.html","id":"preparação-1","chapter":"1 O básico do ggplot","heading":"Preparação","text":"","code":""},{"path":"o-básico-do-ggplot.html","id":"estrutura-dos-dados","chapter":"1 O básico do ggplot","heading":"Estrutura dos dados","text":"primeira coisa entender sobre seus dados categóricos é se eles em sua forma bruta existem observações como uma lista de casos, ou como um quadro resumido ou agregados que contém contagens ou proporções. O estado de seus dados terá impacto na função de gráficos que você utiliza:Se seus dados forem observações em bruto com uma linha por observação, você provavelmente utilizará geom_bar()Se seus dados já estiverem agregados em contagens ou proporções, você provavelmente utilizará geom_col()","code":""},{"path":"o-básico-do-ggplot.html","id":"classe-da-coluna-e-ordenamento-dos-valores","chapter":"1 O básico do ggplot","heading":"Classe da coluna e ordenamento dos valores","text":"Em seguida, examine classe das colunas que você deseja traçar. Examinamos hospital, primeiro com função class() R base, e com tabyl() pacote janitor.Podemos ver que os valores dentro são caracteres, pois se tratam de nomes de hospitais, e por padrão são ordenados alfabeticamente. Existem também “outros” e “faltam” valores, que preferimos que sejam últimas subcategorias ao apresentarmos subdivisões. Portanto, transformamos esta coluna em um fator e reordenamos. Isto é tratado com mais detalhes na página [Fatores].","code":"\n# Veja a classe da coluna hospital - podemos ver que é um caracter\nclass(linelist$hospital)## [1] \"character\"\n# Veja os valores e proporções dentro dessa coluna \"hospital\" \nlinelist %>% \n  tabyl(hospital)##                              hospital    n    percent\n##                      Central Hospital  454 0.07710598\n##                     Military Hospital  896 0.15217391\n##                               Missing 1469 0.24949049\n##                                 Other  885 0.15030571\n##                         Port Hospital 1762 0.29925272\n##  St. Mark's Maternity Hospital (SMMH)  422 0.07167120\n# Converte para fator e define a ordem dos níveis para que \"Other\" (outros) e \"Missing\" (faltantes) sejam os últimos a aparecer \nlinelist <- linelist %>% \n  mutate(\n    hospital = fct_relevel(hospital, \n      \"St. Mark's Maternity Hospital (SMMH)\",\n      \"Port Hospital\", \n      \"Central Hospital\",\n      \"Military Hospital\",\n      \"Other\",\n      \"Missing\"))\nlevels(linelist$hospital)## [1] \"St. Mark's Maternity Hospital (SMMH)\"\n## [2] \"Port Hospital\"                       \n## [3] \"Central Hospital\"                    \n## [4] \"Military Hospital\"                   \n## [5] \"Other\"                               \n## [6] \"Missing\""},{"path":"o-básico-do-ggplot.html","id":"ggplot_basics_bars","chapter":"1 O básico do ggplot","heading":"geom_bar()","text":"Utilize geom_bar() se você quiser que altura da barra (ou altura dos componentes da barra empilhada) reflita o número de linhas relevantes nos dados. Essas barras terão espaços entre elas, menos que aesthetic largura ( width = ) esteja ajustada.Forneça apenas uma atribuição de coluna de um eixo (tipicamente eixo x). Se você fornecer x e y, você receberá Error: stat_count() só pode ter uma estética x ou y.Você pode criar barras empilhadas, adicionando uma atribuição de fill = coluna dentro de mapping = aes().O eixo oposto será intitulado “count” por padrão, pois representa o número de linhasA seguir, designamos o resultado para o eixo y, mas poderia ser igualmente fácil eixo x. Se você tiver valores de caracteres mais longos, às vezes pode parecer melhor virar barras para o lado e colocar legenda embaixo. Isto pode ter impacto na forma como os níveis seu fator são ordenados - neste caso os revertemos com fct_rev() para colocar “” e “Missing” na parte inferior.","code":"\n# A) Desfecho em todos os casos\nggplot(linelist %>% drop_na(outcome)) + \n  geom_bar(aes(y = fct_rev(hospital)), width = 0.7) +\n  theme_minimal()+\n  labs(title = \"A) Número de casos por hospital\",\n       y = \"Hospital\")\n\n\n# B) Desfecho em todos os casos por hospital\nggplot(linelist %>% drop_na(outcome)) + \n  geom_bar(aes(y = fct_rev(hospital), fill = outcome), width = 0.7) +\n  theme_minimal()+\n  theme(legend.position = \"bottom\") +\n  labs(title = \"B) Número de casos de Ebola recuperados e de óbitos,   por hospital\",\n       y = \"Hospital\")"},{"path":"o-básico-do-ggplot.html","id":"geom_col","chapter":"1 O básico do ggplot","heading":"geom_col()","text":"Utilize geom_col() se você quiser que altura da barra (ou altura dos componentes da barra empilhados) reflita os valores pré-calculados que existem nos dados. Muitas vezes, estas são contagens sumárias ou “agregadas”, ou proporções.Forneça atribuições de colunas para ambos eixos para geom_col(). Normalmente, sua coluna eixo x é discreta e sua coluna eixo y é numérica.Digamos que temos este conjunto de dados “resultados”:Abaixo está o código utilizando geom_col para criar gráficos de barras simples para mostrar distribuição dos resultados dos pacientes com Ebola. Com o geom_col, tanto x como y precisam ser especificados. Aqui x é variável categórica ao longo eixo x, e y é coluna de proporções geradas proporcao.Para mostrarmos detalhamentos por hospital, precisaríamos que nossa tabela contivesse mais informações e que estivesse em formato “longo”. Criamos esta tabela com freqüências das categorias combinadas outcome (Desfecho) e hospital (ver página [Agrupando dados] para dicas de agrupamento).Criamos então o ggplot com alguma formatação adicional:Rotação eixo: Trocamos o eixo com coord_flip() para que pudéssemos ler os nomes dos hospitais.Colunas lado lado: Acrescentou o argumento position = \"dodge\" para que barras de óbitos e recuperação sejam apresentadas lado lado em vez de empilhadas. Note que barras empilhadas são o padrão.Largura da coluna: Largura especificada, de modo que colunas são agora metade da largura normal.Ordem das colunas: Inverteu ordem das categorias eixo y para que ‘’ (Outros) e ‘Missing’ (Faltantes) estejam na parte inferior, com scale_x_discrete(limits=rev). Note que utilizamos isso em vez de scale_y_discrete porque o hospital é indicado argumento ‘x’ de ’aes()`, mesmo que visualmente esteja eixo y. Fazemos isso porque ggplot parece apresentar categorias ao contrário, menos que digamos lhe o contrário.Outros detalhes: Etiquetas/títulos e cores adicionadas dentro de labs e scale_fill_color respectivamente.Note que proporções são binárias, por isso podemos preferir abandonar “recuperação” e apenas mostrar proporção de quem morreu. Isto é apenas para fins ilustrativos.Se utilizar geom_col() com dados de datas (por exemplo, uma epicurva partir de dados agregados) - você vai querer ajustar o argumento width = (largura) para remover linhas de “espaço” entre barras. Se utilizar o conjunto de dados diário, ajuste width = 1. Se semanal, ajuste width = 7. Os meses não são possíveis de serem visualizados dessa forma, porque cada mês tem um número de dias diferente.","code":"## # A tibble: 2 × 3\n##   outcome     n proporcao\n##   <chr>   <int>     <dbl>\n## 1 Death    1022      56.2\n## 2 Recover   796      43.8\n# Desfecho em todos os casos\nggplot(outcomes) + \n  geom_col(aes(x=outcome, y = proporcao)) +\n  labs(subtitle = \"Número de casos recuperados e óbitos de Ebola\")\noutcomes2 <- linelist %>% \n  drop_na(outcome) %>% \n  count(hospital, outcome) %>%  # obtém contagens para hospital e desfecho \n\n  group_by(hospital) %>%        # Agrupa para que proporção esteja fora do total do hospital \n  mutate(proportion = n/sum(n)*100) # Calcula as proporções\n\n\nhead(outcomes2) # Veja uma prévia dos dados## # A tibble: 6 × 4\n## # Groups:   hospital [3]\n##   hospital                             outcome     n proportion\n##   <fct>                                <chr>   <int>      <dbl>\n## 1 St. Mark's Maternity Hospital (SMMH) Death     199       61.2\n## 2 St. Mark's Maternity Hospital (SMMH) Recover   126       38.8\n## 3 Port Hospital                        Death     785       57.6\n## 4 Port Hospital                        Recover   579       42.4\n## 5 Central Hospital                     Death     193       53.9\n## 6 Central Hospital                     Recover   165       46.1\n# Desfecho em todos os casos por hospital\nggplot(outcomes2) +  \n  geom_col(\n    mapping = aes(\n      x = proportion,                 # apresenta os dados calculados previamente\n      y = fct_rev(hospital),          # reordenas os níveis do fator, colocando na base os desejados \n      fill = outcome),                # empilhados por desfecho\n    width = 0.5)+                     # barras mais finas (valores menores que 1)\n  theme_minimal() +                   # Tema mínimo\n  theme(legend.position = \"bottom\")+\n  labs(subtitle = \"Número de casos recuperados e óbitos por Ebola, por hospital\",\n       fill = \"Desfecho\",             # título da legenda\n       y = \"Contagem\",                # título do eixo y\n       x = \"Hospital de admissão\")+   # título do eixo x\n  scale_fill_manual(                 # escolhendo as cores manualmente\n    values = c(\"Death\"= \"#3B1c8C\",   # para óbito\n               \"Recover\" = \"#21908D\" )) # para recuperado"},{"path":"o-básico-do-ggplot.html","id":"geom_histogram","chapter":"1 O básico do ggplot","heading":"geom_histogram()","text":"Os histogramas podem parecer gráficos de barras, mas são distintos porque medem distribuição de uma variável contínua. Não há espaços entre “barras”, e apenas uma coluna é fornecida para geom_histogram(). Há argumentos específicos para histogramas como bin_width = e breaks = para especificar como os dados devem ser cdivididos em classes. seção acima sobre dados contínuos e página sobre [Curvas Epidemiológicas] fornecem detalhes adicionais.","code":""},{"path":"o-básico-do-ggplot.html","id":"recursos","chapter":"1 O básico do ggplot","heading":"1.14 Recursos","text":"Há uma enorme quantidade de ajuda online, especialmente com o ggplot. Veja:Cheat sheet (cola) ggplot2Outra cheat sheetPágina básico ggplot tidyversePlatando variáveis contínuasR Data Science pages visualização de dadosgráficos para comunicação","code":""}]
