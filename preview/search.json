[{"path":"index.html","id":"section","chapter":"","heading":"","text":"Este manual se esforça para:Servir como um manual rápido de referência código RFornecer exemplos centrados em tarefas que abordam problemas epidemiológicos comunsAuxiliar os epidemiologistas na transição para o RSer acessível em ambientes com baixa conectividade com Internet através de um versão offline \n**Escrito por epidemiologistas, para epidemiologistas*Somos epidemiologistas aplicados de todo o mundo, escrevendo em nosso tempo livre para oferecer este recurso à comunidade. Seu encorajamento e feedback são muito bem-vindos:Formulário estruturado de feedbackEmail epiRhandbook@gmail.com ou tweet @epiRhandbookSubmeta issues nosso repositório Github","code":""},{"path":"index.html","id":"como-usar-este-manual","chapter":"","heading":"Como usar este manual","text":"Navegue pelas páginas Índice, ou use caixa de buscaClique nos ícones “copiar” para copiar o códigoVocê pode seguir - junto com [os dados exemplo][Fazer o Download manual e dos dados].Consulte seção “Recursos” de cada página para obter mais materialVersão -line*Veja instruções na página [Fazer o Download manual e dos dados]].LínguasEsta é uma versão traduzida para Português. Se você quer colaborar em melhorá-la, corrigindo algum erro, ou traduzir para outra língua, por favor, nos contacte!","code":""},{"path":"index.html","id":"agradecimentos","chapter":"","heading":"0.1 Agradecimentos","text":"Este manual é produzido por uma colaboração de epidemiologistas de todo o mundo, aproveitando experiência de organizações que incluem agências de saúde locais, estaduais, provinciais e nacionais, Organização Mundial da Saúde (OMS), Médicos Sem Fronteiras / Médicos sem Fronteiras (MSF), sistemas hospitalares e instituições acadêmicas.Este manual é não* um produto aprovado de qualquer organização específica. Embora nos esforcemos para ser precisos, não damos nenhuma garantia conteúdo deste livro.","code":""},{"path":"index.html","id":"colaboradores","chapter":"","heading":"Colaboradores","text":"Editor: Neale BatraEquipe principal projeto: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay Campbell, Paula Blomquist, Aminata Ndiaye, Isaac Florence, Isha Berry, Mathilde Mousset, Sara Hollis, Liza Coyer, Kate Kelsey, Marie-Amélie Degail Chabrat, Joao MuiangaAutores: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Chris Bailey, Daniel Molling, Isha Berry, Emma Buajitti, Mathilde Mousset, Sara Hollis, Wen LinRevisores: Pat Keating, Annick Lenglet, Margot Charette, Danielly Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Kate Kelsey, Berhe Etsay, John Rossow, Mackenzie Zendt, James Wright, Laura Haskins, Flavio Finger, Tim Taylor, Jae Hyoung Tim Lee, Brianna Bradley, Wayne Enanoria, Manual Albela Miranda, Molly Mantus, Pattama Ulrich, Joseph Timothy, Adam Vaughan, Olivia Varsaneux, Lionel Monteiro, Joao MuiangaIlustradores: Calder FongTradutores da versão em língua portuguesa (Brasil): Carolina Musso, César Augusto Galvão , Halian Vilela, Laís Relvas ,Felipe Cardoso tradução, Rafaela Tadei, Pauliana Galvão ; Nathalia Zini ; Paula Maiçara, João Pedro Angelici, Ademar Barbosa Dantas Junior, Eucilene Santana, Hudson Gabriel Virtuoso Fontenelle","code":""},{"path":"index.html","id":"financiamento-e-apoio","chapter":"","heading":"Financiamento e apoio","text":"O manual recebeu financiamento de apoio através de uma subvenção de emergência COVID-19 da TEPHINET, rede global de Programas de Treinamento em Epidemiologia de Campo (FETPs).O apoio administrativo foi fornecido pela EPIET Alumni Network (EAN), com agradecimentos especiais à Annika Wendland. O EPIET é o Programa Europeu de Treinamento em Epidemiologia de Intervenção.Agradecimentos especiais aos Médicos Sem Fronteiras (MSF) Centro Operacional Amsterdã (OCA) por seu apoio durante o desenvolvimento deste manual.Esta publicação foi apoiada pelo Acordo Cooperativo número NU2GGH001873, financiado pelos Centros de Controle e Prevenção de Doenças através TEPHINET, um programa da Força Tarefa para Saúde Global. Seu conteúdo é de responsabilidade exclusiva dos autores e não representa necessariamente visão oficial dos Centros de Controle e Prevenção de Doenças, Departamento de Saúde e Serviços Humanos, Task Force Global Health, Inc. ou TEPHINET.","code":""},{"path":"index.html","id":"inspiração","chapter":"","heading":"Inspiração","text":"infinidade de tutoriais e vinhetas que forneceram conhecimento para o desenvolvimento conteúdo manual são creditados dentro de suas respectivas páginas.De modo mais geral, seguintes fontes forneceram inspiração para este manual:“R4Epis” project (colaboração entre MSF e RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"termos-de-uso-e-contribuição","chapter":"","heading":"Termos de Uso e Contribuição","text":"","code":""},{"path":"index.html","id":"licença","chapter":"","heading":"Licença","text":"Esta obra está licenciada sob uma Licença Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.Cursos acadêmicos e programas de treinamento de epidemiologistas são bem-vindos para usar este manual com seus alunos. Se você tiver dúvidas sobre o uso pretendido, envie um e-mail para epiRhandbook@gmail.com.","code":""},{"path":"index.html","id":"citação","chapter":"","heading":"Citação","text":"Batra, Neale, et ai. O Manual Epidemiologista R. 2021. ","code":""},{"path":"index.html","id":"contribuição","chapter":"","heading":"Contribuição","text":"Se você quiser fazer uma contribuição de conteúdo, entre em contato conosco primeiro por meio de questões Github ou por e-mail. Estamos implementando um cronograma de atualizações e criando um guia contribuidor.Observe que o projeto epiRhandbook é lançado com um Código de Conduta Contribuidor. Ao contribuir para este projeto, você concorda em respeitar seus termos.","code":""},{"path":"relatórios-com-r-markdown.html","id":"relatórios-com-r-markdown","chapter":"1 Relatórios com R Markdown","heading":"1 Relatórios com R Markdown","text":"R Markdown é uma ferramenta amplamente usada para criar produtos automatizados, reproduzíveis e compartilháveis, como relatórios. É possível criar produtos estáticos ou interativos, em MS Word, pdf, html, powerpoint, entre outros formatos.Um script de R Markdown intercala código em R e texto de modo que o script se torna o seu output final. é possível criar um documento completamente formatado, incluindo o texto (que pode ser dinâmico para mudar de acordo com os seus dados), tabelas, figuras, itens enumerados ou não, bibliografia, etc.Esses documentos podem ser produzidos para serem atualizados com base em uma rotina (por exemplo, relatórios diários de vigilância) ou rodarem com subconjuntos dos seus dados, como relatórios para cada jurisdição de uma agência.Outras páginas nesse livro expandem esse assunto:página [Organizing routine reports] demonstra como aplicar uma rotina à produção de relatórios com pastas geradas automaticamente com seus metadados de tempo (timestamps).página [Dashboards R Markdown] explica como formatar um relatório R Markdown como um painel (dashboard).Em outra nota, o projeto R4Epis tem desenvolvido templates de scripts R Markdown para surtos comuns e cenários de pesquisa encontrados em locais projeto MSF (Médicos Sem Fronteiras).","code":""},{"path":"relatórios-com-r-markdown.html","id":"preparação","chapter":"1 Relatórios com R Markdown","heading":"1.1 Preparação","text":"Ideias preliminares ao R MarkdownPara explicar alguns dos conceitos e pacotes envolvidos:Markdown é uma “linguagem” que permite escrever um documento usando texto comum, que pode ser convertido para html e outros formatos. Não é específico de R e arquivos escritos nessa “linguagem” tem extensão ‘.md’.R Markdown: é uma variação de markdown que é específica de R - permite escrever um documento usando markdown para produzir código, mas também incluir código em R e expor seus resultados.rmarkdown - o pacote: é usado pelo R para renderizar o arquivo .Rmd para exportação desejada. Seu foco é converter sintaxe markdown (texto), então também precisamos de…knitr: Esse pacote R lerá os blocos de código, executá-los e costurá-los (inglês knit, tricotar) de volta ao documento.Pandoc: Finalmente, pandoc converte o objeto final em um documento word/pdf/powerpoint, etc. É um software separado R, mas é instalado automaticamente com o RStudio.(Fonte: https://rmarkdown.rstudio.com/authoring_quick_tour.html):InstalaçãoPara criar um produto R Markdown, é necessário ter os seguintes instalados:O pacote rmarkdown (knitr será automaticamente instalado também)Pandoc, que deve ter vindo instalado com RStudio. Se você não está usando RStudio, é possível baixar o Pandoc aqui: http://pandoc.org.Se quiser gerar um arquivo PDF (um pouquinho mais complicado), será necessário instalar o LaTeX. Para usuários de R Markdown que nunca instalaram o LaTeX antes, recomendamos que instale o TinyTeX (https://yihui.name/tinytex/). Para isso, use os seguintes comandos:","code":"\npacman::p_load(tinytex)     # instala o pacote tinytex\ntinytex::install_tinytex()  # Comando de R para instalar o software TinyTeX"},{"path":"relatórios-com-r-markdown.html","id":"começando","chapter":"1 Relatórios com R Markdown","heading":"1.2 Começando","text":"","code":""},{"path":"relatórios-com-r-markdown.html","id":"instalação-do-pacote-rmarkdown-para-r","chapter":"1 Relatórios com R Markdown","heading":"Instalação do pacote rmarkdown para R","text":"Instale o pacote rmarkdown. Neste livro enfatizamos p_load() de pacman, que instala o pacote se necessário e o carrega para ser usado. É possível também carregar pacotes instalados com library() R base. Vera pagina em [R basics] para mais informação sobre os pacotes de R.","code":"\npacman::p_load(rmarkdown)"},{"path":"relatórios-com-r-markdown.html","id":"começando-um-novo-arquivo-rmd","chapter":"1 Relatórios com R Markdown","heading":"Começando um novo arquivo Rmd","text":"Rstudio, abra um novo arquivo R markdown, começando em ‘Arquivo’, depois ‘Novo arquivo’, depois em ‘R markdown…’.Rstudio lhe dará opções de output para selecionar. exemplo abaixo, escolhemos “HTML” porque queremos criar um documento html. O título e o nome autor não são importantes. Se o tipo documento de saída desejado não é nenhum desses, não se preocupe - é possível escolher qualquer um e alterar posteriormente.Isso abrirá um novo script .Rmd.","code":""},{"path":"relatórios-com-r-markdown.html","id":"importante-saber","chapter":"1 Relatórios com R Markdown","heading":"Importante saber","text":"O diretório de trabalhoO diretório de trabalho de um arquivo markdown é o local onde o próprio arquivo Rmd é salvo. Por exemplo, se o projeto R estiver dentro de ~/Documents/projectX e o próprio arquivo Rmd estiver em uma subpasta~/Documents/projectX/markdownfiles/markdown.Rmd, o código read.csv(\"data.csv\") Dentro markdown irá procurar por um arquivo csv na pasta markdownfiles, e não na pasta raiz projeto onde os scripts dentro dos projetos normalmente procurariam automaticamente.Para se referir arquivos em outro lugar, você precisará usar o caminho completo arquivo ou usar o pacote . O pacote define o diretório de trabalho para pasta raiz projeto R e é explicado em detalhes nas páginas [Projetos R] e [Importar e exportar] deste manual. Por exemplo, para importar um arquivo chamado “data.csv” de dentro da pasta projectX, o código seria import((“data.csv”)).Observe que o uso de setwd() em scripts R Markdown não é recomendado - ele se aplica apenas ao trecho de código em que está escrito.Trabalhando em uma unidade vs seu computadorComo o R Markdown pode ter problemas de pandoc ao ser executado em uma unidade de rede compartilhada, é recomendado que sua pasta esteja em sua máquina local, por exemplo, em um projeto em ‘Meus Documentos’. Se você usa Git (muito recomendado!), Isso será familiar. Para obter mais detalhes, consulte páginas manual em [R em unidades de rede] e [Erros e ajuda].","code":""},{"path":"relatórios-com-r-markdown.html","id":"componentes-do-r-markdown","chapter":"1 Relatórios com R Markdown","heading":"1.3 Componentes do R Markdown","text":"Um documento R Markdown pode ser editado RStudio da mesma forma que um script R padrão. Quando você inicia um novo script R Markdown, o RStudio tenta ser útil mostrando um modelo que explica diferentes seções de um script R Markdown.seguir está o que aparece ao iniciar um novo script Rmd destinado produzir uma saída html (conforme seção anterior).Como você pode ver, existem três componentes básicos em um arquivo Rmd: YAML, texto Markdown e blocos de código R.Eles irão criar e se tornar saída seu documento. Veja o diagrama abaixo:","code":""},{"path":"relatórios-com-r-markdown.html","id":"metadados-yaml","chapter":"1 Relatórios com R Markdown","heading":"Metadados YAML","text":"Referido como ‘metadados YAML’ ou apenas ‘YAML’, isso está topo documento R Markdown. Esta seção script dirá ao seu arquivo Rmd que tipo de saída produzir, preferências de formatação e outros metadados, como título documento, autor e data. Existem outros usos não mencionados aqui (mas mencionados em ‘Produção de uma saída’). Observe que o recuo é importante; tabulações não são aceitas, mas espaços, sim.Esta seção deve começar com uma linha contendo apenas três traços --- e deve fechar com uma linha contendo apenas três traços ---. Os parâmetros YAML vêm em pares chave: valor. colocação dos dois pontos em YAML é importante - os pares chave: valor são separados por dois pontos (e não sinais de igual!).O YAML deve começar com metadados para o documento. ordem desses parâmetros YAML primários (não recuados) não importa. Por exemplo:can use R code YAML values writing -line code (preceded r within back-ticks) also within quotes (see example date:).image , clicked default output html file, can see YAML says output: html_document. However can also change say powerpoint_presentation word_document even pdf_document.Você pode usar o código R em valores YAML escrevendo-o como código -line (precedido por r dentro de crases), mas também entre aspas (veja o exemplo acima para date:).Na imagem acima, como clicamos que nossa saída padrão seria um arquivo html, podemos ver que o YAML diz output: html_document. entanto, também podemos alterar isso para dizer powerpoint_presentationouword_document ou mesmo pdf_document.","code":"title: \"My document\"\nauthor: \"Me\"\ndate: \"2022-06-21\""},{"path":"relatórios-com-r-markdown.html","id":"texto","chapter":"1 Relatórios com R Markdown","heading":"1.3.1 Texto","text":"Esta é narrativa seu documento, incluindo os títulos e cabeçalhos. Ele é escrito na linguagem “markdown”, que é usada em muitos softwares diferentes.Abaixo estão principais maneiras de escrever este texto. Consulte documentação mais extensa disponível na “cheatsheet” R Markdown site RStudio.","code":""},{"path":"relatórios-com-r-markdown.html","id":"novas-linhas","chapter":"1 Relatórios com R Markdown","heading":"Novas linhas","text":"Exclusivamente R Markdown, para iniciar uma nova linha, insira dois espaços final da linha anterior e pressione Enter / Return.","code":""},{"path":"relatórios-com-r-markdown.html","id":"case","chapter":"1 Relatórios com R Markdown","heading":"Case","text":"Cerque seu texto normal com esses caracteres para alterar como ele aparece na saída.Sublinhados (_text_) ou asterisco único (*texto*) para itálicoAsteriscos duplos (**texto**) para texto em negritoCrases (text) para exibir o texto como códigoA aparência real da fonte pode ser definida usando modelos específicos (especificados nos metadados YAML; consulte guias de exemplo).","code":""},{"path":"relatórios-com-r-markdown.html","id":"cor","chapter":"1 Relatórios com R Markdown","heading":"1.3.1.1 Cor","text":"Não existe um mecanismo simples para alterar cor texto R Markdown. Uma solução alternativa, SE sua saída um arquivo HTML, é adicionar uma linha HTML ao texto markdown. O código HTML abaixo imprimirá uma linha de texto em vermelho negrito.[PERIGO: Este é um aviso.] {style = “color: red;”}","code":"<span style=\"color: red;\">**_DANGER:_** This is a warning.<\/span>  "},{"path":"relatórios-com-r-markdown.html","id":"títulos-e-cabeçalhos","chapter":"1 Relatórios com R Markdown","heading":"Títulos e cabeçalhos","text":"Um símbolo hash (#) em uma parte texto de um script R Markdown cria um título. Isso é diferente de um pedaço de código R script, qual um símbolo hash é um mecanismo para comentar / anotar / desativar, como em um script R normal.Diferentes níveis de título são estabelecidos com diferentes números de símbolos hash início de uma nova linha. Um símbolo de hash é um título ou cabeçalho principal. Dois símbolos hash são um título de segundo nível. Os cabeçalhos de terceiro e quarto níveis podem ser feitos com mais símbolos hash sucessivamente.","code":"# First-level heading / title\n\n## Second level heading  \n\n### Third-level heading"},{"path":"relatórios-com-r-markdown.html","id":"marcadores-e-numeração","chapter":"1 Relatórios com R Markdown","heading":"Marcadores e numeração","text":"Use asteriscos (*) para criar uma lista de marcadores. Conclua frase anterior, insira dois espaços, Enter/Return duas vezes e, em seguida, inicie seus marcadores. Inclua um espaço entre o asterisco e o texto marcador. Após cada marcador, insira dois espaços e pressione Enter/Return. Os submarcadores funcionam da mesma maneira, mas são recuados. Os números funcionam da mesma maneira, mas em vez de um asterisco, escreva 1), 2), etc. Abaixo está aparência texto script R Markdown.","code":"Here are my bullets (there are two spaces after this colon):  \n\n* Bullet 1 (followed by two spaces and Enter/Return)  \n* Bullet 2 (followed by two spaces and Enter/Return)  \n  * Sub-bullet 1 (followed by two spaces and Enter/Return)  \n  * Sub-bullet 2 (followed by two spaces and Enter/Return)  \n  "},{"path":"relatórios-com-r-markdown.html","id":"comente-o-texto","chapter":"1 Relatórios com R Markdown","heading":"Comente o texto","text":"Você pode “comentar” o texto R Markdown da mesma forma que pode usar o “#” para comentar uma linha código R em um bloco R. Basta destacar o texto e pressionar Ctrl+Shift+c (Cmd+Shift+c para Mac). O texto será circundado por setas e ficará verde. Ele não aparecerá na sua saída.","code":""},{"path":"relatórios-com-r-markdown.html","id":"blocos-de-código","chapter":"1 Relatórios com R Markdown","heading":"Blocos de código","text":"seções script que são dedicadas à execução código R são chamadas de “blocos”. É aqui que você pode carregar pacotes, importar dados e realizar o gerenciamento e visualização de dados reais. Pode haver muitos blocos de código, então eles podem ajudá-lo organizar seu código R em partes, talvez intercaladas com texto. Note: Esses ‘pedaços’ parecerão ter uma cor de fundo ligeiramente diferente da parte narrativa documento.Cada pedaço é aberto com uma linha que começa com três crases e chaves que contêm parâmetros para o pedaço ({}). O pedaço termina com mais três crases.Você pode criar um novo bloco digitando-o você mesmo, usando o atalho de teclado “Ctrl+Alt+” (ou Cmd+Shift+r Mac) ou clicando ícone verde ‘inserir um novo bloco de código’ topo seu editor de script.Algumas notas sobre o conteúdo das chaves {}:Eles começam com ‘r’ para indicar que o nome idioma dentro bloco é RApós o r, você pode opcionalmente escrever um “nome” de trecho – eles não são necessários, mas podem ajudá-lo organizar seu trabalho. Observe que se você nomear seus blocos, você deve SEMPRE usar nomes exclusivos ou então R reclamará quando você tentar renderizar.chaves também podem incluir outras opções, escritas como tag = value, como:eval = FALSE para não executar o código Recho = FALSE para não imprimir o código-fonte R trecho documento de saídaaviso = FALSO para não imprimir avisos produzidos pelo código Rmensagem = FALSO para não imprimir nenhuma mensagem produzida pelo código Rincluir = VERDADEIRO / FALSO se incluir saídas em partes (por exemplo, gráficos) documentoout.width = e .height = - fornecer estilo .width =\"75%\"fig.align = \"center\" ajustar como uma figura é alinhada na páginafig.show = 'hold' se o seu pedaço imprimir várias figuras e você quiser que elas sejam impressas lado lado (par com .width = c(\"33%\", \"67%\"). Também pode ser definido como fig.show = 'asis' para mostrá-los abaixo código que os gera,'hide' para ocultar ou 'animate' para concatenar múltiplos em uma animação.Um cabeçalho de bloco deve ser escrito em uma linhaTente evitar pontos, sublinhados e espaços. Use hifens ( - ) se precisar de um separador.Leia mais extensivamente sobre opções knitr aqui.Algumas das opções acima podem ser configuradas com apontar e clicar usando os botões de configuração canto superior direito bloco. Aqui, você pode especificar quais partes pedaço você deseja que o documento renderizado inclua, saber, o código, saídas e os avisos. Isso sairá como preferências escritas dentro das chaves, por exemplo, echo = FALSE se você especificar que deseja ‘Mostrar apenas saída’.Também há duas setas canto superior direito de cada fragmento, que são úteis para executar o código dentro de um fragmento ou todo o código em blocos anteriores. Passe o mouse sobre eles para ver o que fazem.Para que opções globais sejam aplicadas todos os fragmentos script, você pode configurar isso em seu primeiro bloco de código R script. Por exemplo, para que apenas saídas sejam mostradas para cada bloco de código e não o código em si, você pode incluir este comando fragmento de código R:","code":"\nknitr::opts_chunk$set(echo = FALSE) "},{"path":"relatórios-com-r-markdown.html","id":"código-r-no-texto","chapter":"1 Relatórios com R Markdown","heading":"Código R no texto","text":"Você também pode incluir código R mínimo dentro de crases. Dentro dos crases, comece o código com “r” e um espaço, para que o RStudio saiba avaliar o código como código R. Veja o exemplo abaixo.O exemplo abaixo mostra vários níveis de título, marcadores e usa o código R para data atual (Sys.Date ()) para avaliar em uma data impressa.O exemplo acima é simples (mostrando data atual), mas usando mesma sintaxe, você pode exibir valores produzidos por códigos R mais complexos (por exemplo, para calcular o mínimo, mediana, o máximo de uma coluna). Você também pode integrar objetos R ou valores que foram criados em blocos de código R anteriormente script.Como exemplo, o script abaixo calcula proporção de casos com menos de 18 anos, usando funções tidyverse, e cria os objetos less18,total e less18prop. Este valor dinâmico é inserido texto subsequente. Vemos como fica quando imprimimos um documento Word.","code":""},{"path":"relatórios-com-r-markdown.html","id":"imagens","chapter":"1 Relatórios com R Markdown","heading":"1.3.2 Imagens","text":"Você pode incluir imagens em seu R Markdown de duas maneiras:Se o acima não funcionar, tente usar knitr::include_graphics()(lembre-se, o caminho seu arquivo pode ser escrito usando o pacote )","code":"![](\"path/to/image.png\")  \nknitr::include_graphics(\"path/to/image.png\")\nknitr::include_graphics(here::here(\"path\", \"to\", \"image.png\"))"},{"path":"relatórios-com-r-markdown.html","id":"tabelas","chapter":"1 Relatórios com R Markdown","heading":"1.3.3 Tabelas","text":"Crie uma tabela usando hifens ( - ) e barras ( | ). O número de hifens antes/entre barras permite o número de espaços na célula antes que o texto comece quebrar.O código acima produz tabela abaixo:","code":"Column 1 |Column  2 |Column 3\n---------|----------|--------\nCell A   |Cell B    |Cell C\nCell D   |Cell E    |Cell F"},{"path":"relatórios-com-r-markdown.html","id":"seções-com-guias","chapter":"1 Relatórios com R Markdown","heading":"1.3.4 Seções com guias","text":"Para saídas HTML, você pode organizar seções em “guias”. Basta adicionar .tabset nas chaves {}que são colocadas * após um título *. Quaisquer subtítulos abaixo desse título (até outro título mesmo nível) aparecerão como guias nas quais o usuário pode clicar. Leia mais aquiVocê pode adicionar uma opção adicional .tabset-pills após .tabset para dar às próprias guias uma aparência de pastilha. Esteja ciente de que, ao visualizar saída HTML com guias, funcionalidade de pesquisa Ctrl+f pesquisará apenas guias “ativas”, não guias ocultas.","code":""},{"path":"relatórios-com-r-markdown.html","id":"estrutura-do-arquivo","chapter":"1 Relatórios com R Markdown","heading":"1.4 Estrutura do arquivo","text":"Existem várias maneiras de estruturar seu R Markdown e quaisquer scripts R associados. Cada um tem vantagens e desvantagens:R Markdown independente - tudo o que é necessário para o relatório é importado ou criado dentro R MarkdownFonte de outros arquivos - Você pode executar scripts R externos com o comando source() e usar suas saídas RmdScripts filhos - um mecanismo alternativo para source()Utilizar um “runfile” - Executar comandos em um script R antes de renderizar o R Markdown","code":""},{"path":"relatórios-com-r-markdown.html","id":"rmd-independente-.não-numerado","chapter":"1 Relatórios com R Markdown","heading":"1.4.1 Rmd independente {.não numerado}","text":"Para um relatório relativamente simples, você pode optar por organizar seu script R Markdown de forma que seja “independente” e não envolva nenhum script externo.Tudo que você precisa para executar o markdown R é importado ou criado dentro arquivo Rmd, incluindo todos os pedaços de código e carregamento de pacote. Esta abordagem “independente” é apropriada quando você não precisa fazer muito processamento de dados (por exemplo, traz um arquivo de dados limpo ou semilimpeza) e renderização R Markdown não demora muito.Neste cenário, uma organização lógica script R Markdown pode ser:Defina opções globais knitrCarregar pacotesImportar dadosDados processoProduza resultados (tabelas, gráficos, etc.)Salve saídas, se aplicável (.csv, .png, etc.)","code":""},{"path":"relatórios-com-r-markdown.html","id":"fonte-de-outros-arquivos","chapter":"1 Relatórios com R Markdown","heading":"Fonte de outros arquivos","text":"Uma variação da abordagem “independente” é fazer com que os pedaços de código R Markdown “originem” (executem) outros scripts R. Isso pode tornar seu script R Markdown menos confuso, mais simples e mais fácil de organizar. Também pode ajudar se você deseja exibir os valores finais início relatório. Nesta abordagem, o script final R Markdown simplesmente combina saídas pré-processadas em um documento.Uma maneira de fazer isso é fornecendo os scripts R (caminho e nome arquivo com extensão) para o comando R base source().Observe que ao usar source() dentro R Markdown, os arquivos externos ainda serão executados durante o curso de renderização de seu arquivo Rmd. Portanto, cada script é executado sempre que você renderiza o relatório. Portanto, ter esses comandos source() dentro R Markdown não acelera seu tempo de execução, nem ajuda muito na eliminação de bugs, pois o erro produzido ainda será impresso ao produzir o R Markdown.Uma alternativa é utilizar opção child = knitr. EXPLIQUE MAIS FAZERVocê deve estar ciente dos vários ambientes R. Os objetos criados dentro de um ambiente não estarão necessariamente disponíveis para o ambiente usado pelo R Markdown.","code":"\nsource(\"your-script.R\", local = knitr::knit_global())\n# or sys.source(\"your-script.R\", envir = knitr::knit_global())"},{"path":"relatórios-com-r-markdown.html","id":"runfile","chapter":"1 Relatórios com R Markdown","heading":"Runfile","text":"Esta abordagem envolve utilização script R que contém o (s) comando (s) render() para pré-processar objetos que alimentam o markdown R.Por exemplo, você pode carregar os pacotes, carregar e limpar os dados e até mesmo criar os gráficos de interesse antes de render(). Essas etapas podem ocorrer script R ou em outros scripts originados via source. Contanto que esses comandos ocorram na mesma sessão RStudio e os objetos sejam salvos ambiente, os objetos podem ser chamados dentro conteúdo Rmd. Em seguida, o próprio markdown R será usado apenas para etapa final - para produzir saída com todos os objetos pré-processados. Isso é muito mais fácil de corrigir se algo der errado.Essa abordagem é útil pelos seguintes motivos:Mensagens de erro mais informativas - essas mensagens serão geradas partir script R, não R Markdown. R Erros de Markdown tendem dizer qual pedaço teve um problema, mas não revelam qual linha.Se aplicável, você pode executar longas etapas de processamento antes comando render() - elas serão executadas apenas uma vez.exemplo abaixo, temos um script R separado qual pré-processamos um objeto data ambiente R e então renderizamos o “create_output.Rmd” usando render().","code":"\ndata <- import(\"datafile.csv\") %>%       # Load data and save to environment\n  select(age, hospital, weight)          # Select limited columns\n\nrmarkdown::render(input = \"create_output.Rmd\")   # Create Rmd file"},{"path":"relatórios-com-r-markdown.html","id":"estrutura-da-pasta","chapter":"1 Relatórios com R Markdown","heading":"1.4.2 Estrutura da pasta","text":"O fluxo de trabalho também diz respeito à estrutura geral da pasta, como ter uma pasta de ‘saída’ para documentos e figuras criados e pastas de ‘dados’ ou ‘entradas’ para dados limpos. Não entramos em maiores detalhes aqui, mas verifique página [Organizando relatórios de rotina].","code":""},{"path":"relatórios-com-r-markdown.html","id":"produzindo-o-documento","chapter":"1 Relatórios com R Markdown","heading":"1.5 Produzindo o documento","text":"Você pode produzir o documento das seguintes maneiras:Manualmente pressionando o botão “Knit” na parte superior editor de script RStudio (rápido e fácil)Execute o comando render() (executado fora script R Markdown)","code":""},{"path":"relatórios-com-r-markdown.html","id":"opção-1-botão-knit","chapter":"1 Relatórios com R Markdown","heading":"1.5.1 Opção 1: Botão “Knit”","text":"Quando você tiver o arquivo Rmd aberto, pressione o ícone / botão ‘Knit’ na parte superior arquivo.R Studio mostrará o progresso em uma guia ‘R Markdown’ perto console R. O documento será aberto automaticamente quando concluído.O documento será salvo na mesma pasta que seu script markdown R e com o mesmo nome de arquivo (exceto extensão). Obviamente, isso não é ideal para o controle de versão (será sobrescrito cada vez que você exportar, menos que movido manualmente), pois você pode precisar renomear o arquivo (por exemplo, adicionar uma data).Este é o botão de atalho RStudio para função render() de rmarkdown. Essa abordagem é compatível apenas com um R markdown autocontido, onde todos os componentes necessários existem ou são originados arquivo.","code":""},{"path":"relatórios-com-r-markdown.html","id":"opção-2-comando-render","chapter":"1 Relatórios com R Markdown","heading":"Opção 2: comando render()","text":"Outra maneira de produzir saída R Markdown é rodar função render() (pacote rmarkdown). Você deve executar este comando fora script R Markdown - ou em um script R separado (geralmente chamado de “arquivo de execução”) ou como um comando independente R Console.Tal como acontece com “knit”, configurações padrão salvarão saída Rmd na mesma pasta script Rmd, com o mesmo nome de arquivo (além da extensão arquivo). Por exemplo, “my_report.Rmd” quando exportado criará “my_report.docx” se você estiver exportando para um documento Word. entanto, usando render() você tem opção de usar configurações diferentes. render() pode aceitar argumentos, incluindo:output_format = Este é o formato de saída para converter (por exemplo, \"html_document\", \"pdf_document\", \"word_document\" ou \"\"). Você também pode especificar isso YAML dentro script R Markdown.output_file = Este é o nome arquivo de saída (e caminho arquivo). Isso pode ser criado por meio de funções R como () ou str_glue() conforme demonstrado abaixo.output_dir = Este é um diretório de saída (pasta) para salvar o arquivo. Isso permite que você escolha uma alternativa diferente diretório em que o arquivo Rmd é salvo.output_options = Você pode fornecer uma lista de opções que irão sobrescrever aquelas script YAML (por exemplo)output_yaml = Você pode fornecer o caminho para um arquivo .yml que contém especificações YAMLparams = Veja seção sobre parâmetros abaixoVeja lista completa aquiComo um exemplo, para melhorar o controle de versão, o comando seguir salvará o arquivo de saída dentro de uma subpasta ‘outputs’, com data atual nome arquivo. Para criar o nome arquivo, função str_glue() pacote stringr é usada para ‘colar’ strings estáticas (escritas de forma simples) com código R dinâmico (escrito entre colchetes). Por exemplo, se 10 de abril de 2021, o nome arquivo abaixo será “Report_2021-04-10.docx”. Veja página em [Caracteres e strings] para mais detalhes sobre str_glue().À medida que o arquivo é renderizado, o console RStudio mostrará o andamento da renderização em até 100% e uma mensagem final para indicar que renderização foi concluída.","code":"\nrmarkdown::render(input = \"my_report.Rmd\")\nrmarkdown::render(\n  input = \"create_output.Rmd\",\n  output_file = stringr::str_glue(\"outputs/Report_{Sys.Date()}.docx\")) "},{"path":"relatórios-com-r-markdown.html","id":"opções-3-pacote-reportfactory","chapter":"1 Relatórios com R Markdown","heading":"Opções 3: pacote reportfactory","text":"O pacote R reportfactory oferece um método alternativo de organização e compilação de relatórios R Markdown voltados para cenários onde você executa relatórios rotineiramente (por exemplo, diariamente, semanalmente …). Facilita compilação de vários arquivos R Markdown e o organização de seus resultados. Em essência, ele fornece uma “fábrica” partir da qual você pode executar os relatórios R Markdown, obter pastas com carimbo de data e hora automaticamente para saídas e ter controle de versão “leve”.Leia mais sobre esse fluxo de trabalho na página [Organização de relatórios de rotina].","code":""},{"path":"relatórios-com-r-markdown.html","id":"relatórios-parametrizados","chapter":"1 Relatórios com R Markdown","heading":"1.6 Relatórios parametrizados","text":"Você pode usar parametrização para tornar um relatório dinâmico, de modo que possa ser executado com uma configuração específica (por exemplo, uma data ou local específico ou com certas opções de knit). Abaixo, nos concentramos básico, mas há mais detalhes online sobre relatórios parametrizados.Usando lista de linha Ebola como exemplo, digamos que queremos executar um relatório de vigilância padrão para cada hospital cada dia. Mostramos como fazer isso usando parâmetros.Importante: relatórios dinâmicos também são possíveis sem estrutura formal de parâmetros (sem params:), usando objetos R simples em um script R adjacente. Isso é explicado final desta seção.","code":""},{"path":"relatórios-com-r-markdown.html","id":"configurando-parâmetros","chapter":"1 Relatórios com R Markdown","heading":"Configurando parâmetros","text":"Você tem várias opções para especificar valores de parâmetro para sua saída R Markdown.","code":""},{"path":"relatórios-com-r-markdown.html","id":"opção-1-defina-os-parâmetros-em-yaml","chapter":"1 Relatórios com R Markdown","heading":"Opção 1: Defina os parâmetros em YAML","text":"Edite o YAML para incluir uma opção params:, com declarações recuadas para cada parâmetro que você deseja definir. Neste exemplo, criamos os parâmetros data ehospital, para os quais especificamos valores. Esses valores estão sujeitos alterações cada vez que o relatório é executado. Se você usar o botão “Knit” para produzir saída, os parâmetros terão esses valores padrão. Da mesma forma, se você usar render() os parâmetros terão esses valores padrão, menos que seja especificado de outra forma comando render().Em segundo plano, esses valores de parâmetro estão contidos em uma lista somente leitura chamada params. Assim, você pode inserir os valores dos parâmetros código R da mesma forma que faria com outro objeto / valor R em seu ambiente. Simplesmente digite params$ seguido nome parâmetro. Por exemplo, params$hospital para representar o nome hospital (“Hospital Central” por padrão).Observe que os parâmetros também podem conter valores true ou false e, portanto, podem ser incluídos nas opções knitr para um bloco R. Por exemplo, você pode definir {r, eval = params$run} em vez de {r, eval = FALSE}, e agora se o trecho é executado ou não depende valor de um parâmetro run:.Observe que para os parâmetros que são datas, eles serão inseridos como uma string. Portanto, para que params$date seja interpretado código R, ele provavelmente precisará ser empacotado com .Date() ou uma função semelhante para converter para classe Date.","code":"---\ntitle: Surveillance report\noutput: html_document\nparams:\n date: 2021-04-10\n hospital: Central Hospital\n---"},{"path":"relatórios-com-r-markdown.html","id":"opção-2-defina-os-parâmetros-em-render","chapter":"1 Relatórios com R Markdown","heading":"Opção 2: Defina os parâmetros em render()","text":"Como mencionado acima, uma alternativa para pressionar o botão “Knit” para produzir saída é executar função render() partir de um script separado. Neste último caso, você pode especificar os parâmetros serem usados naquela renderização para o argumento params = de render().Observe que quaisquer valores de parâmetro fornecidos aqui irão sobrescrever seus valores padrão se escritos dentro YAML. Escrevemos os valores entre aspas, pois neste caso eles devem ser definidos como valores de caractere / string.O comando abaixo renderiza “monitoramento_report.Rmd”, especifica um nome de arquivo de saída dinâmica e pasta, e fornece uma list() de dois parâmetros e seus valores para o argumento params =.","code":"\nrmarkdown::render(\n  input = \"surveillance_report.Rmd\",  \n  output_file = stringr::str_glue(\"outputs/Report_{Sys.Date()}.docx\"),\n  params = list(date = \"2021-04-10\", hospital  = \"Central Hospital\"))"},{"path":"relatórios-com-r-markdown.html","id":"opção-3-defina-os-parâmetros-usando-uma-interface-gráfica-do-usuário","chapter":"1 Relatórios com R Markdown","heading":"Opção 3: Defina os parâmetros usando uma interface gráfica do usuário","text":"Para uma sensação mais interativa, você também pode usar Interface Gráfica Usuário (GUI) para selecionar manualmente os valores dos parâmetros. Para fazer isso, podemos clicar menu suspenso ao lado botão ‘Knit’ e escolher ‘Knit com parâmetros’.Um pop-aparecerá permitindo que você digite valores para os parâmetros que são estabelecidos YAML documento.Você pode conseguir o mesmo por meio de um comando render() especificando params = \"ask \", como demonstrado abaixo.entanto, digitar valores nesta janela pop-está sujeito erros e erros ortográficos. Você pode preferir adicionar restrições aos valores que podem ser inseridos nos menus suspensos. Você pode fazer isso adicionando YAML várias especificações para cada entrada params:.label: é como o título para aquele menu suspenso específicovalue: é o valor padrão (inicial)input: definido como select para o menu suspensochoices: Dê os valores elegíveis menu suspensoAbaixo, essas especificações são escritas para o parâmetro hospital.Ao exportar (através botão ‘knit com parâmetros’ ou por render()), janela pop-terá opções suspensas para selecionar.","code":"rmarkdown::render(\n  input = \"surveillance_report.Rmd\",  \n  output_file = stringr::str_glue(\"outputs/Report_{Sys.Date()}.docx\"),\n  params = “ask”)---\ntitle: Surveillance report\noutput: html_document\nparams:\n date: 2021-04-10\n hospital: \n  label: “Town:”\n  value: Central Hospital\n  input: select\n  choices: [Central Hospital, Military Hospital, Port Hospital, St. Mark's Maternity Hospital (SMMH)]\n---"},{"path":"relatórios-com-r-markdown.html","id":"exemplo-parametrizado","chapter":"1 Relatórios com R Markdown","heading":"Exemplo parametrizado","text":"O código seguir cria parâmetros para data ehospital, que são usados R Markdown como params$date e params$hospital, respectivamente.Na saída relatório resultante, veja como os dados são filtrados para o hospital específico e o título gráfico se refere ao hospital e à data corretos. Usamos o arquivo “linelist_cleaned.rds” aqui, mas seria particularmente apropriado se própria lista de linha também tivesse um carimbo de data para alinhar com data parametrizada.Exportar isso produz saída final com fonte e o layout padrão.","code":""},{"path":"relatórios-com-r-markdown.html","id":"parametrização-sem-params","chapter":"1 Relatórios com R Markdown","heading":"Parametrização sem params","text":"Se você estiver renderizando um arquivo R Markdown com render() de um script separado, você pode criar o impacto da parametrização sem usar funcionalidade params:.Por exemplo, script R que contém o comando render(), você pode simplesmente definir hospital e date como dois objetos R (valores) antes comando render(). R Markdown, você não precisaria ter uma seção params: YAML, e nos referiríamos ao objeto date ao invés de params$date e hospital ao invés deparams$hospital.Seguir essa abordagem significa que você não pode “tricotar com parâmetros”, usar GUI ou incluir opções de knit dentro dos parâmetros. entanto, permite um código mais simples, o que pode ser vantajoso.","code":"\n# This is a R script that is separate from the R Markdown\n\n# define R objects\nhospital <- \"Central Hospital\"\ndate <- \"2021-04-10\"\n\n# Render the R markdown\nrmarkdown::render(input = \"create_output.Rmd\") "},{"path":"relatórios-com-r-markdown.html","id":"reiterando-relatórios","chapter":"1 Relatórios com R Markdown","heading":"1.7 Reiterando relatórios","text":"Podemos querer executar um relatório várias vezes, variando os parâmetros de entrada, para produzir um relatório para cada jurisdição / unidade. Isso pode ser feito usando ferramentas para iteração, que são explicadas em detalhes na página [Iteração, loops e listas]. opções incluem o pacote purrr ou o uso de um loop conforme explicado abaixo.Abaixo, usamos um simples loop para gerar um relatório de vigilância para todos os hospitais de interesse. Isso é feito com um comando (em vez de alterar manualmente o parâmetro hospital um por vez). O comando para renderizar os relatórios deve existir em um script separado fora relatório Rmd. Este script também conterá objetos definidos para “fazer um loop” - data de hoje e um vetor de nomes de hospitais para fazer o loop.Em seguida, alimentamos esses valores um de cada vez comando render() usando um loop, que executa o comando uma vez para cada valor vetor hospitais. letra representa posição índice (1 4) hospital que está sendo usado nessa iteração, de modo que hospital_list[1] seria “Hospital Central”. Esta informação é fornecida em dois lugares comando render():Para o nome arquivo, de forma que o nome arquivo da primeira iteração, se produzido em 10 de abril de 2021, seria “Report_Central Hospital_2021-04-10.docx”, salvo na subpasta ‘output’ diretório de trabalho.Para params = tal que o Rmd use o nome hospital internamente sempre que o valor params$hospital é chamado (por exemplo, para filtrar o conjunto de dados para o hospital específico apenas). Neste exemplo, quatro arquivos seriam criados - um para cada hospital.<! - output_file = paste0 (“output / Report_”, hospital_list [], refdate, “.docx”) -><! - O texto dentro da marcação precisaria então se referir hospital_list [] e refdate. ->","code":"\nhospitals <- c(\"Central Hospital\",\n                \"Military Hospital\", \n                \"Port Hospital\",\n                \"St. Mark's Maternity Hospital (SMMH)\") \nfor(i in 1:length(hospitals)){\n  rmarkdown::render(\n    input = \"surveillance_report.Rmd\",\n    output_file = str_glue(\"output/Report_{hospitals[i]}_{Sys.Date()}.docx\"),\n    params = list(hospital  = hospitals[i]))\n}       "},{"path":"relatórios-com-r-markdown.html","id":"modelos","chapter":"1 Relatórios com R Markdown","heading":"1.8 Modelos","text":"Usando um documento de modelo que contém qualquer formatação desejada, você pode ajustar estética de como saída Rmd ficará. Você pode criar, por exemplo, um arquivo MS Word ou PowerPoint que contenha páginas / slides com dimensões, marcas d’água, planos de fundo e fontes desejados.","code":""},{"path":"relatórios-com-r-markdown.html","id":"documentos-do-word","chapter":"1 Relatórios com R Markdown","heading":"1.8.1 Documentos do Word","text":"Para criar um modelo, inicie um novo documento Word (ou use uma saída existente com formatação que mais lhe convier) e edite fontes definindo os Estilos. Em Estilo, os títulos 1, 2 e 3 referem-se aos vários níveis de cabeçalho de redução (# Cabeçalho 1, ## Cabeçalho 2 e ### Cabeçalho 3 respectivamente). Clique com o botão direito estilo e clique em ‘modificar’ para alterar formatação da fonte, bem como o parágrafo (por exemplo, você pode introduzir quebras de página antes de certos estilos que podem ajudar com o espaçamento). Outros aspectos documento Word, como margens, tamanho da página, cabeçalhos, etc., podem ser alterados como um documento Word normal qual você está trabalhando diretamente.","code":""},{"path":"relatórios-com-r-markdown.html","id":"documentos-do-powerpoint","chapter":"1 Relatórios com R Markdown","heading":"1.8.2 Documentos do PowerPoint","text":"Como acima, crie um novo conjunto de slides ou use um arquivo PowerPoint existente com formatação desejada. Para outras edições, clique em ‘Exibir’ e ‘Slide Master’. partir daqui, você pode alterar aparência slide ‘mestre’ editando formatação texto nas caixas de texto, bem como dimensões plano de fundo / página para página geral.Infelizmente, editar arquivos PowerPoint é um pouco menos flexível:Um cabeçalho de primeiro nível (# Cabeçalho 1) se tornará automaticamente o título de um novo slide,Um texto de ## Header 2 não aparecerá como uma legenda, mas como um texto dentro da caixa de texto principal slide (menos que você encontre uma maneira de manipular visualização mestre).Plotagens e tabelas geradas irão automaticamente para novos slides. Você precisará combiná-los, por exemplo, função patchwork para combinar ggplots, de modo que apareçam na mesma página. Veja esta postagem blog sobre como usar o pacote patchwork para colocar várias imagens em um slide.Veja o pacote officer para uma ferramenta para trabalhar mais fundo com apresentações em PowerPoint.","code":""},{"path":"relatórios-com-r-markdown.html","id":"integração-de-modelos-no-yaml","chapter":"1 Relatórios com R Markdown","heading":"Integração de modelos no YAML","text":"Uma vez que um modelo é preparado, o detalhe disso pode ser adicionado YAML Rmd abaixo da linha de ‘output’ e abaixo de onde o tipo de documento é especificado (que vai para uma linha separada). Nota reference_doc pode ser usado para modelos de slides PowerPoint.É mais fácil salvar o modelo na mesma pasta onde está o arquivo Rmd (como exemplo abaixo) ou em uma subpasta.","code":"---\ntitle: Surveillance report\noutput: \n word_document:\n  reference_docx: \"template.docx\"\nparams:\n date: 2021-04-10\n hospital: Central Hospital\ntemplate:\n \n---"},{"path":"relatórios-com-r-markdown.html","id":"formatando-arquivos-html","chapter":"1 Relatórios com R Markdown","heading":"Formatando arquivos HTML","text":"Os arquivos HTML não usam modelos, mas podem ter os estilos configurados YAML. HTMLs são documentos interativos e são particularmente flexíveis. Cobrimos algumas opções básicas aqui.Índice: Podemos adicionar um índice com toc: true abaixo, e também especificar que ele permanece visível (“floats”) conforme você rola, com toc_float: true.Índice: Podemos adicionar um índice com toc: true abaixo, e também especificar que ele permanece visível (“floats”) conforme você rola, com toc_float: true.Temas: Podemos nos referir alguns temas pré-fabricados, que vêm de uma biblioteca de temas Bootswatch. exemplo abaixo, usamos cerulean. Outras opções incluem: diário, plano, escuro, legível, laboratório espacial, unido, cosmo, lúmen, papel, arenito, simplex e yeti. original, journal, flatly, darkly, readable, spacelab, united, cosmo, lumen, paper, sandstone, simplex, e yetiTemas: Podemos nos referir alguns temas pré-fabricados, que vêm de uma biblioteca de temas Bootswatch. exemplo abaixo, usamos cerulean. Outras opções incluem: diário, plano, escuro, legível, laboratório espacial, unido, cosmo, lúmen, papel, arenito, simplex e yeti. original, journal, flatly, darkly, readable, spacelab, united, cosmo, lumen, paper, sandstone, simplex, e yetiRealçar: Configurar isso muda aparência texto destacado (por exemplo, código dentro dos pedaços que são mostrados). Os estilos suportados incluem default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, breezedark, e textmate.Realçar: Configurar isso muda aparência texto destacado (por exemplo, código dentro dos pedaços que são mostrados). Os estilos suportados incluem default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, breezedark, e textmate.Aqui está um exemplo de como integrar opções acima YAML.Abaixo estão dois exemplos de saídas HTML, ambas com índices flutuantes, mas diferentes temas e estilos de destaque selecionados:","code":"---\ntitle: \"HTML example\"\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n    theme: cerulean\n    highlight: kate\n    \n---"},{"path":"relatórios-com-r-markdown.html","id":"conteúdo-dinâmico","chapter":"1 Relatórios com R Markdown","heading":"1.9 Conteúdo dinâmico","text":"Em uma saída HTML, o conteúdo seu relatório pode ser dinâmico. Abaixo estão alguns exemplos:","code":""},{"path":"relatórios-com-r-markdown.html","id":"tabelas-1","chapter":"1 Relatórios com R Markdown","heading":"1.9.1 Tabelas","text":"Em um relatório HTML, você pode imprimir quadros / tabelas de dados de forma que o conteúdo seja dinâmico, com filtros e barras de rolagem. Existem vários pacotes que oferecem esse recurso.Para fazer isso com o pacote DT, como é usado em todo este manual, você pode inserir um trecho de código como este:função datatable() imprimirá o quadro de dados fornecido como uma tabela dinâmica para o leitor. Você pode definir rownames = FALSE para simplificar o lado esquerdo da tabela. filter = \"top\" fornece um filtro para cada coluna. argumento option() forneça uma lista de outras especificações. Abaixo, incluímos dois: pageLength = 5 define o número de linhas que aparecem como 5 (linhas restantes podem ser visualizadas através das setas), e scrollX = TRUE habilita uma barra de rolagem na parte inferior da tabela (para colunas que se estendem muito para direita).Se seu conjunto de dados muito grande, considere mostrar apenas primeiras X linhas envolvendo o quadro de dados em head().","code":""},{"path":"relatórios-com-r-markdown.html","id":"widgets-html","chapter":"1 Relatórios com R Markdown","heading":"Widgets HTML","text":"[HTML widgets R] (http://www.htmlwidgets.org/) são uma classe especial de pacotes R que permitem maior interatividade utilizando bibliotecas JavaScript. Você pode embuti-los nas saídas HTML R Markdown.Alguns exemplos comuns desses widgets incluem:Plotly (usado nesta página manual e na página [Gráficos interativos])visNetwork (usado na página [Cadeias de transmissão] deste manual)Folheto (usado na página [Noções básicas de GIS] deste manual)dygraphs (úteis para mostrar dados de séries temporais de forma interativa)DT (datatable()) (usado para mostrar tabelas dinâmicas com filtro, classificação, etc.)função ggplotly() de plotly é particularmente fácil de usar. Veja página [Gráficos interativos].","code":""},{"path":"relatórios-com-r-markdown.html","id":"recursos","chapter":"1 Relatórios com R Markdown","heading":"1.10 Recursos","text":"Mais informações podem ser encontradas em:https://bookdown.org/yihui/rmarkdown/https://rmarkdown.rstudio.com/articles_intro.htmlUma boa explicação de markdown vs knitr vs Rmarkdown está aqui: https://stackoverflow.com/questions/40563479/relationship--r-markdown-knitr-pandoc--bookdown","code":""}]
